/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NewtonWrapper(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NewtonWrapper(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NewtonWrapper(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


	// minimal standard library support
	#include "new"
	#include "stdio.h"
	#include "stdlib.h"

	// newton SDK
	#include "Newton.h"

	// dmath sdk
	#include "dMathDefines.h"
	#include "dVector.h"
	#include "dMatrix.h"
	#include "dQuaternion.h"
	#include "dLinearAlgebra.h"

	// dContainers SDK
	#include "dContainersStdAfx.h"
	#include "dCRC.h"
	#include "dRtti.h"
	#include "dTree.h"
	#include "dList.h"
	#include "dHeap.h"
	#include "dClassInfo.h"
	#include "dRefCounter.h"
	#include "dBezierSpline.h"

	// Custom Joints SDK
	#include "CustomJointLibraryStdAfx.h"
	#include "CustomAlloc.h"
	#include "CustomJoint.h"
	#include "CustomBallAndSocket.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_MAJOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_MINOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_BROADPHASE_DEFAULT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_BROADPHASE_PERSINTENT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_DYNAMIC_BODY_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_KINEMATIC_BODY_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NEWTON_DEFORMABLE_BODY_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_SPHERE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_CAPSULE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_CYLINDER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_CHAMFERCYLINDER_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_BOX_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_CONE_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_CONVEXHULL_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_COMPOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_TREE_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_HEIGHTFIELD_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_CLOTH_PATCH_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_DEFORMABLE_SOLID_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_USERMESH_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_SCENE_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SERIALIZE_ID_FRACTURED_COMPOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBoxParam_m_x_set(void * jarg1, float jarg2) {
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonBoxParam_m_x_get(void * jarg1) {
  float jresult ;
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  float result;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  result = (float) ((arg1)->m_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBoxParam_m_y_set(void * jarg1, float jarg2) {
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonBoxParam_m_y_get(void * jarg1) {
  float jresult ;
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  float result;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  result = (float) ((arg1)->m_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBoxParam_m_z_set(void * jarg1, float jarg2) {
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonBoxParam_m_z_get(void * jarg1) {
  float jresult ;
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  float result;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  result = (float) ((arg1)->m_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonBoxParam() {
  void * jresult ;
  NewtonBoxParam *result = 0 ;
  
  result = (NewtonBoxParam *)new NewtonBoxParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonBoxParam(void * jarg1) {
  NewtonBoxParam *arg1 = (NewtonBoxParam *) 0 ;
  
  arg1 = (NewtonBoxParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSphereParam_m_radio_set(void * jarg1, float jarg2) {
  NewtonSphereParam *arg1 = (NewtonSphereParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonSphereParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonSphereParam_m_radio_get(void * jarg1) {
  float jresult ;
  NewtonSphereParam *arg1 = (NewtonSphereParam *) 0 ;
  float result;
  
  arg1 = (NewtonSphereParam *)jarg1; 
  result = (float) ((arg1)->m_radio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonSphereParam() {
  void * jresult ;
  NewtonSphereParam *result = 0 ;
  
  result = (NewtonSphereParam *)new NewtonSphereParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonSphereParam(void * jarg1) {
  NewtonSphereParam *arg1 = (NewtonSphereParam *) 0 ;
  
  arg1 = (NewtonSphereParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCapsuleParam_m_radio0_set(void * jarg1, float jarg2) {
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCapsuleParam_m_radio0_get(void * jarg1) {
  float jresult ;
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  float result;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  result = (float) ((arg1)->m_radio0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCapsuleParam_m_radio1_set(void * jarg1, float jarg2) {
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCapsuleParam_m_radio1_get(void * jarg1) {
  float jresult ;
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  float result;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  result = (float) ((arg1)->m_radio1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCapsuleParam_m_height_set(void * jarg1, float jarg2) {
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCapsuleParam_m_height_get(void * jarg1) {
  float jresult ;
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  float result;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonCapsuleParam() {
  void * jresult ;
  NewtonCapsuleParam *result = 0 ;
  
  result = (NewtonCapsuleParam *)new NewtonCapsuleParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonCapsuleParam(void * jarg1) {
  NewtonCapsuleParam *arg1 = (NewtonCapsuleParam *) 0 ;
  
  arg1 = (NewtonCapsuleParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCylinderParam_m_radio0_set(void * jarg1, float jarg2) {
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCylinderParam_m_radio0_get(void * jarg1) {
  float jresult ;
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  float result;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  result = (float) ((arg1)->m_radio0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCylinderParam_m_radio1_set(void * jarg1, float jarg2) {
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCylinderParam_m_radio1_get(void * jarg1) {
  float jresult ;
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  float result;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  result = (float) ((arg1)->m_radio1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCylinderParam_m_height_set(void * jarg1, float jarg2) {
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCylinderParam_m_height_get(void * jarg1) {
  float jresult ;
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  float result;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonCylinderParam() {
  void * jresult ;
  NewtonCylinderParam *result = 0 ;
  
  result = (NewtonCylinderParam *)new NewtonCylinderParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonCylinderParam(void * jarg1) {
  NewtonCylinderParam *arg1 = (NewtonCylinderParam *) 0 ;
  
  arg1 = (NewtonCylinderParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConeParam_m_radio_set(void * jarg1, float jarg2) {
  NewtonConeParam *arg1 = (NewtonConeParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonConeParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonConeParam_m_radio_get(void * jarg1) {
  float jresult ;
  NewtonConeParam *arg1 = (NewtonConeParam *) 0 ;
  float result;
  
  arg1 = (NewtonConeParam *)jarg1; 
  result = (float) ((arg1)->m_radio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConeParam_m_height_set(void * jarg1, float jarg2) {
  NewtonConeParam *arg1 = (NewtonConeParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonConeParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonConeParam_m_height_get(void * jarg1) {
  float jresult ;
  NewtonConeParam *arg1 = (NewtonConeParam *) 0 ;
  float result;
  
  arg1 = (NewtonConeParam *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonConeParam() {
  void * jresult ;
  NewtonConeParam *result = 0 ;
  
  result = (NewtonConeParam *)new NewtonConeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonConeParam(void * jarg1) {
  NewtonConeParam *arg1 = (NewtonConeParam *) 0 ;
  
  arg1 = (NewtonConeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonChamferCylinderParam_m_radio_set(void * jarg1, float jarg2) {
  NewtonChamferCylinderParam *arg1 = (NewtonChamferCylinderParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonChamferCylinderParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonChamferCylinderParam_m_radio_get(void * jarg1) {
  float jresult ;
  NewtonChamferCylinderParam *arg1 = (NewtonChamferCylinderParam *) 0 ;
  float result;
  
  arg1 = (NewtonChamferCylinderParam *)jarg1; 
  result = (float) ((arg1)->m_radio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonChamferCylinderParam_m_height_set(void * jarg1, float jarg2) {
  NewtonChamferCylinderParam *arg1 = (NewtonChamferCylinderParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonChamferCylinderParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonChamferCylinderParam_m_height_get(void * jarg1) {
  float jresult ;
  NewtonChamferCylinderParam *arg1 = (NewtonChamferCylinderParam *) 0 ;
  float result;
  
  arg1 = (NewtonChamferCylinderParam *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonChamferCylinderParam() {
  void * jresult ;
  NewtonChamferCylinderParam *result = 0 ;
  
  result = (NewtonChamferCylinderParam *)new NewtonChamferCylinderParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonChamferCylinderParam(void * jarg1) {
  NewtonChamferCylinderParam *arg1 = (NewtonChamferCylinderParam *) 0 ;
  
  arg1 = (NewtonChamferCylinderParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConvexHullParam_m_vertexCount_set(void * jarg1, int jarg2) {
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonConvexHullParam_m_vertexCount_get(void * jarg1) {
  int jresult ;
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  int result;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  result = (int) ((arg1)->m_vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConvexHullParam_m_vertexStrideInBytes_set(void * jarg1, int jarg2) {
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexStrideInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonConvexHullParam_m_vertexStrideInBytes_get(void * jarg1) {
  int jresult ;
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  int result;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  result = (int) ((arg1)->m_vertexStrideInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConvexHullParam_m_faceCount_set(void * jarg1, int jarg2) {
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_faceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonConvexHullParam_m_faceCount_get(void * jarg1) {
  int jresult ;
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  int result;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  result = (int) ((arg1)->m_faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConvexHullParam_m_vertex_set(void * jarg1, void * jarg2) {
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConvexHullParam_m_vertex_get(void * jarg1) {
  void * jresult ;
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  result = (float *) ((arg1)->m_vertex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonConvexHullParam() {
  void * jresult ;
  NewtonConvexHullParam *result = 0 ;
  
  result = (NewtonConvexHullParam *)new NewtonConvexHullParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonConvexHullParam(void * jarg1) {
  NewtonConvexHullParam *arg1 = (NewtonConvexHullParam *) 0 ;
  
  arg1 = (NewtonConvexHullParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCompoundCollisionParam_m_chidrenCount_set(void * jarg1, int jarg2) {
  NewtonCompoundCollisionParam *arg1 = (NewtonCompoundCollisionParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonCompoundCollisionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_chidrenCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCompoundCollisionParam_m_chidrenCount_get(void * jarg1) {
  int jresult ;
  NewtonCompoundCollisionParam *arg1 = (NewtonCompoundCollisionParam *) 0 ;
  int result;
  
  arg1 = (NewtonCompoundCollisionParam *)jarg1; 
  result = (int) ((arg1)->m_chidrenCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonCompoundCollisionParam() {
  void * jresult ;
  NewtonCompoundCollisionParam *result = 0 ;
  
  result = (NewtonCompoundCollisionParam *)new NewtonCompoundCollisionParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonCompoundCollisionParam(void * jarg1) {
  NewtonCompoundCollisionParam *arg1 = (NewtonCompoundCollisionParam *) 0 ;
  
  arg1 = (NewtonCompoundCollisionParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionTreeParam_m_vertexCount_set(void * jarg1, int jarg2) {
  NewtonCollisionTreeParam *arg1 = (NewtonCollisionTreeParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonCollisionTreeParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionTreeParam_m_vertexCount_get(void * jarg1) {
  int jresult ;
  NewtonCollisionTreeParam *arg1 = (NewtonCollisionTreeParam *) 0 ;
  int result;
  
  arg1 = (NewtonCollisionTreeParam *)jarg1; 
  result = (int) ((arg1)->m_vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionTreeParam_m_indexCount_set(void * jarg1, int jarg2) {
  NewtonCollisionTreeParam *arg1 = (NewtonCollisionTreeParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonCollisionTreeParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_indexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionTreeParam_m_indexCount_get(void * jarg1) {
  int jresult ;
  NewtonCollisionTreeParam *arg1 = (NewtonCollisionTreeParam *) 0 ;
  int result;
  
  arg1 = (NewtonCollisionTreeParam *)jarg1; 
  result = (int) ((arg1)->m_indexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonCollisionTreeParam() {
  void * jresult ;
  NewtonCollisionTreeParam *result = 0 ;
  
  result = (NewtonCollisionTreeParam *)new NewtonCollisionTreeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonCollisionTreeParam(void * jarg1) {
  NewtonCollisionTreeParam *arg1 = (NewtonCollisionTreeParam *) 0 ;
  
  arg1 = (NewtonCollisionTreeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_vertexCount_set(void * jarg1, int jarg2) {
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_vertexCount_get(void * jarg1) {
  int jresult ;
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  int result;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  result = (int) ((arg1)->m_vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_triangleCount_set(void * jarg1, int jarg2) {
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_triangleCount_get(void * jarg1) {
  int jresult ;
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  int result;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  result = (int) ((arg1)->m_triangleCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_vrtexStrideInBytes_set(void * jarg1, int jarg2) {
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vrtexStrideInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_vrtexStrideInBytes_get(void * jarg1) {
  int jresult ;
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  int result;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  result = (int) ((arg1)->m_vrtexStrideInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_indexList_set(void * jarg1, void * jarg2) {
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  if (arg1) (arg1)->m_indexList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_indexList_get(void * jarg1) {
  void * jresult ;
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  result = (unsigned short *) ((arg1)->m_indexList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_vertexList_set(void * jarg1, void * jarg2) {
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_vertexList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonDeformableMeshParam_m_vertexList_get(void * jarg1) {
  void * jresult ;
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  result = (float *) ((arg1)->m_vertexList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonDeformableMeshParam() {
  void * jresult ;
  NewtonDeformableMeshParam *result = 0 ;
  
  result = (NewtonDeformableMeshParam *)new NewtonDeformableMeshParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonDeformableMeshParam(void * jarg1) {
  NewtonDeformableMeshParam *arg1 = (NewtonDeformableMeshParam *) 0 ;
  
  arg1 = (NewtonDeformableMeshParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_width_set(void * jarg1, int jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_width_get(void * jarg1) {
  int jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (int) ((arg1)->m_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_height_set(void * jarg1, int jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_height_get(void * jarg1) {
  int jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (int) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_gridsDiagonals_set(void * jarg1, int jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_gridsDiagonals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_gridsDiagonals_get(void * jarg1) {
  int jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (int) ((arg1)->m_gridsDiagonals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_elevationDataType_set(void * jarg1, int jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_elevationDataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_elevationDataType_get(void * jarg1) {
  int jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  int result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (int) ((arg1)->m_elevationDataType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_horizonalScale_set(void * jarg1, float jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_horizonalScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_horizonalScale_get(void * jarg1) {
  float jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  float result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (float) ((arg1)->m_horizonalScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_verticalScale_set(void * jarg1, float jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_verticalScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_verticalScale_get(void * jarg1) {
  float jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  float result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (float) ((arg1)->m_verticalScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_horizonalDisplacementScale_set(void * jarg1, float jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_horizonalDisplacementScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_horizonalDisplacementScale_get(void * jarg1) {
  float jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  float result;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (float) ((arg1)->m_horizonalDisplacementScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_vertialElevation_set(void * jarg1, void * jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_vertialElevation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_vertialElevation_get(void * jarg1) {
  void * jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  void *result = 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (void *) ((arg1)->m_vertialElevation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_horizotalDisplacement_set(void * jarg1, void * jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->m_horizotalDisplacement = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_horizotalDisplacement_get(void * jarg1) {
  void * jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  short *result = 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (short *) ((arg1)->m_horizotalDisplacement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_atributes_set(void * jarg1, char * jarg2) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_atributes;
    if (arg2) {
      arg1->m_atributes = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_atributes, (const char *)arg2);
    } else {
      arg1->m_atributes = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NewtonHeightFieldCollisionParam_m_atributes_get(void * jarg1) {
  char * jresult ;
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  char *result = 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  result = (char *) ((arg1)->m_atributes);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonHeightFieldCollisionParam() {
  void * jresult ;
  NewtonHeightFieldCollisionParam *result = 0 ;
  
  result = (NewtonHeightFieldCollisionParam *)new NewtonHeightFieldCollisionParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonHeightFieldCollisionParam(void * jarg1) {
  NewtonHeightFieldCollisionParam *arg1 = (NewtonHeightFieldCollisionParam *) 0 ;
  
  arg1 = (NewtonHeightFieldCollisionParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSceneCollisionParam_m_childrenProxyCount_set(void * jarg1, int jarg2) {
  NewtonSceneCollisionParam *arg1 = (NewtonSceneCollisionParam *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonSceneCollisionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_childrenProxyCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonSceneCollisionParam_m_childrenProxyCount_get(void * jarg1) {
  int jresult ;
  NewtonSceneCollisionParam *arg1 = (NewtonSceneCollisionParam *) 0 ;
  int result;
  
  arg1 = (NewtonSceneCollisionParam *)jarg1; 
  result = (int) ((arg1)->m_childrenProxyCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonSceneCollisionParam() {
  void * jresult ;
  NewtonSceneCollisionParam *result = 0 ;
  
  result = (NewtonSceneCollisionParam *)new NewtonSceneCollisionParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonSceneCollisionParam(void * jarg1) {
  NewtonSceneCollisionParam *arg1 = (NewtonSceneCollisionParam *) 0 ;
  
  arg1 = (NewtonSceneCollisionParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_offsetMatrix_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  float (*arg2)[4] ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (float (*)[4])jarg2; 
  {
    float (*inp)[4] = (float (*)[4])(arg2);
    float (*dest)[4] = (float (*)[4])(arg1->m_offsetMatrix);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_offsetMatrix_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  float (*result)[4] = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (float (*)[4])(float (*)[4]) ((arg1)->m_offsetMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_collisionType_set(void * jarg1, int jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_collisionType_get(void * jarg1) {
  int jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  int result;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (int) ((arg1)->m_collisionType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_collisionUserID_set(void * jarg1, int jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionUserID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_collisionUserID_get(void * jarg1) {
  int jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  int result;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (int) ((arg1)->m_collisionUserID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_box_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonBoxParam *arg2 = (NewtonBoxParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonBoxParam *)jarg2; 
  if (arg1) (arg1)->m_box = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_box_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonBoxParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonBoxParam *)& ((arg1)->m_box);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_cone_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonConeParam *arg2 = (NewtonConeParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonConeParam *)jarg2; 
  if (arg1) (arg1)->m_cone = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_cone_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonConeParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonConeParam *)& ((arg1)->m_cone);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_sphere_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonSphereParam *arg2 = (NewtonSphereParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonSphereParam *)jarg2; 
  if (arg1) (arg1)->m_sphere = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_sphere_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonSphereParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonSphereParam *)& ((arg1)->m_sphere);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_capsule_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCapsuleParam *arg2 = (NewtonCapsuleParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonCapsuleParam *)jarg2; 
  if (arg1) (arg1)->m_capsule = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_capsule_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCapsuleParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonCapsuleParam *)& ((arg1)->m_capsule);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_cylinder_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCylinderParam *arg2 = (NewtonCylinderParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonCylinderParam *)jarg2; 
  if (arg1) (arg1)->m_cylinder = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_cylinder_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCylinderParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonCylinderParam *)& ((arg1)->m_cylinder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_chamferCylinder_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonChamferCylinderParam *arg2 = (NewtonChamferCylinderParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonChamferCylinderParam *)jarg2; 
  if (arg1) (arg1)->m_chamferCylinder = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_chamferCylinder_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonChamferCylinderParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonChamferCylinderParam *)& ((arg1)->m_chamferCylinder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_convexHull_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonConvexHullParam *arg2 = (NewtonConvexHullParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonConvexHullParam *)jarg2; 
  if (arg1) (arg1)->m_convexHull = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_convexHull_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonConvexHullParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonConvexHullParam *)& ((arg1)->m_convexHull);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_deformableMesh_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonDeformableMeshParam *arg2 = (NewtonDeformableMeshParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonDeformableMeshParam *)jarg2; 
  if (arg1) (arg1)->m_deformableMesh = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_deformableMesh_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonDeformableMeshParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonDeformableMeshParam *)& ((arg1)->m_deformableMesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_compoundCollision_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCompoundCollisionParam *arg2 = (NewtonCompoundCollisionParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonCompoundCollisionParam *)jarg2; 
  if (arg1) (arg1)->m_compoundCollision = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_compoundCollision_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCompoundCollisionParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonCompoundCollisionParam *)& ((arg1)->m_compoundCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_collisionTree_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCollisionTreeParam *arg2 = (NewtonCollisionTreeParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonCollisionTreeParam *)jarg2; 
  if (arg1) (arg1)->m_collisionTree = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_collisionTree_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonCollisionTreeParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonCollisionTreeParam *)& ((arg1)->m_collisionTree);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_heightField_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonHeightFieldCollisionParam *arg2 = (NewtonHeightFieldCollisionParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonHeightFieldCollisionParam *)jarg2; 
  if (arg1) (arg1)->m_heightField = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_heightField_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonHeightFieldCollisionParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonHeightFieldCollisionParam *)& ((arg1)->m_heightField);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_sceneCollision_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonSceneCollisionParam *arg2 = (NewtonSceneCollisionParam *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (NewtonSceneCollisionParam *)jarg2; 
  if (arg1) (arg1)->m_sceneCollision = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_sceneCollision_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  NewtonSceneCollisionParam *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (NewtonSceneCollisionParam *)& ((arg1)->m_sceneCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_paramArray_set(void * jarg1, void * jarg2) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_paramArray;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionInfoRecord_m_paramArray_get(void * jarg1) {
  void * jresult ;
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  result = (float *)(float *) ((arg1)->m_paramArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonCollisionInfoRecord() {
  void * jresult ;
  NewtonCollisionInfoRecord *result = 0 ;
  
  result = (NewtonCollisionInfoRecord *)new NewtonCollisionInfoRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonCollisionInfoRecord(void * jarg1) {
  NewtonCollisionInfoRecord *arg1 = (NewtonCollisionInfoRecord *) 0 ;
  
  arg1 = (NewtonCollisionInfoRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_attachmenMatrix_0_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float (*arg2)[4] ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float (*)[4])jarg2; 
  {
    float (*inp)[4] = (float (*)[4])(arg2);
    float (*dest)[4] = (float (*)[4])(arg1->m_attachmenMatrix_0);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_attachmenMatrix_0_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float (*result)[4] = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float (*)[4])(float (*)[4]) ((arg1)->m_attachmenMatrix_0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_attachmenMatrix_1_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float (*arg2)[4] ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float (*)[4])jarg2; 
  {
    float (*inp)[4] = (float (*)[4])(arg2);
    float (*dest)[4] = (float (*)[4])(arg1->m_attachmenMatrix_1);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_attachmenMatrix_1_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float (*result)[4] = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float (*)[4])(float (*)[4]) ((arg1)->m_attachmenMatrix_1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_minLinearDof_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_minLinearDof;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_minLinearDof_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float *)(float *) ((arg1)->m_minLinearDof);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_maxLinearDof_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_maxLinearDof;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_maxLinearDof_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float *)(float *) ((arg1)->m_maxLinearDof);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_minAngularDof_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_minAngularDof;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_minAngularDof_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float *)(float *) ((arg1)->m_minAngularDof);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_maxAngularDof_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_maxAngularDof;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_maxAngularDof_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float *)(float *) ((arg1)->m_maxAngularDof);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_attachBody_0_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  if (arg1) (arg1)->m_attachBody_0 = (NewtonBody const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_attachBody_0_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (NewtonBody *) ((arg1)->m_attachBody_0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_attachBody_1_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  if (arg1) (arg1)->m_attachBody_1 = (NewtonBody const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_attachBody_1_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (NewtonBody *) ((arg1)->m_attachBody_1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_extraParameters_set(void * jarg1, void * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_extraParameters;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointRecord_m_extraParameters_get(void * jarg1) {
  void * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (float *)(float *) ((arg1)->m_extraParameters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_bodiesCollisionOn_set(void * jarg1, int jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bodiesCollisionOn = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonJointRecord_m_bodiesCollisionOn_get(void * jarg1) {
  int jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  int result;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (int) ((arg1)->m_bodiesCollisionOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointRecord_m_descriptionType_set(void * jarg1, char * jarg2) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  char *arg2 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_descriptionType, (const char *)arg2, 128-1);
      arg1->m_descriptionType[128-1] = 0;
    } else {
      arg1->m_descriptionType[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NewtonJointRecord_m_descriptionType_get(void * jarg1) {
  char * jresult ;
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  char *result = 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  result = (char *)(char *) ((arg1)->m_descriptionType);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonJointRecord() {
  void * jresult ;
  NewtonJointRecord *result = 0 ;
  
  result = (NewtonJointRecord *)new NewtonJointRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonJointRecord(void * jarg1) {
  NewtonJointRecord *arg1 = (NewtonJointRecord *) 0 ;
  
  arg1 = (NewtonJointRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_boxP0_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_boxP0;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_boxP0_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->m_boxP0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_boxP1_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_boxP1;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_boxP1_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->m_boxP1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_boxDistanceTravel_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_boxDistanceTravel;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_boxDistanceTravel_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->m_boxDistanceTravel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_threadNumber_set(void * jarg1, int jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_threadNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_threadNumber_get(void * jarg1) {
  int jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int result;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (int) ((arg1)->m_threadNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_faceCount_set(void * jarg1, int jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_faceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_faceCount_get(void * jarg1) {
  int jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int result;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (int) ((arg1)->m_faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_vertexStrideInBytes_set(void * jarg1, int jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexStrideInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_vertexStrideInBytes_get(void * jarg1) {
  int jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int result;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (int) ((arg1)->m_vertexStrideInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_skinThickness_set(void * jarg1, float jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_skinThickness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_skinThickness_get(void * jarg1) {
  float jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float result;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (float) ((arg1)->m_skinThickness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_userData_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_userData_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  void *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (void *) ((arg1)->m_userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_objBody_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  if (arg1) (arg1)->m_objBody = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_objBody_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (NewtonBody *) ((arg1)->m_objBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_polySoupBody_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  if (arg1) (arg1)->m_polySoupBody = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_polySoupBody_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (NewtonBody *) ((arg1)->m_polySoupBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_objCollision_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonCollision *arg2 = (NewtonCollision *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  if (arg1) (arg1)->m_objCollision = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_objCollision_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (NewtonCollision *) ((arg1)->m_objCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_polySoupCollision_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonCollision *arg2 = (NewtonCollision *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  if (arg1) (arg1)->m_polySoupCollision = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_polySoupCollision_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (NewtonCollision *) ((arg1)->m_polySoupCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_vertex_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_vertex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_vertex_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (float *) ((arg1)->m_vertex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_faceIndexCount_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_faceIndexCount = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_faceIndexCount_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (int *) ((arg1)->m_faceIndexCount);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_faceVertexIndex_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_faceVertexIndex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionCollideDesc_m_faceVertexIndex_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  int *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  result = (int *) ((arg1)->m_faceVertexIndex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonUserMeshCollisionCollideDesc() {
  void * jresult ;
  NewtonUserMeshCollisionCollideDesc *result = 0 ;
  
  result = (NewtonUserMeshCollisionCollideDesc *)new NewtonUserMeshCollisionCollideDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonUserMeshCollisionCollideDesc(void * jarg1) {
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_point_set(void * jarg1, void * jarg2) {
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_point;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_point_get(void * jarg1) {
  void * jresult ;
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  result = (float *)(float *) ((arg1)->m_point);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_normal_set(void * jarg1, void * jarg2) {
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_normal;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_normal_get(void * jarg1) {
  void * jresult ;
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  result = (float *)(float *) ((arg1)->m_normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_contactID_set(void * jarg1, long long jarg2) {
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  long long arg2 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->m_contactID = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_contactID_get(void * jarg1) {
  long long jresult ;
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  long long result;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  result = (long long) ((arg1)->m_contactID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_hitBody_set(void * jarg1, void * jarg2) {
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) 0 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  if (arg1) (arg1)->m_hitBody = (NewtonBody const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_hitBody_get(void * jarg1) {
  void * jresult ;
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  result = (NewtonBody *) ((arg1)->m_hitBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_penetration_set(void * jarg1, float jarg2) {
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_penetration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonWorldConvexCastReturnInfo_m_penetration_get(void * jarg1) {
  float jresult ;
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  float result;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  result = (float) ((arg1)->m_penetration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonWorldConvexCastReturnInfo() {
  void * jresult ;
  NewtonWorldConvexCastReturnInfo *result = 0 ;
  
  result = (NewtonWorldConvexCastReturnInfo *)new NewtonWorldConvexCastReturnInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonWorldConvexCastReturnInfo(void * jarg1) {
  NewtonWorldConvexCastReturnInfo *arg1 = (NewtonWorldConvexCastReturnInfo *) 0 ;
  
  arg1 = (NewtonWorldConvexCastReturnInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_p0_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_p0;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_p0_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->m_p0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_p1_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_p1;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_p1_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->m_p1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_normalOut_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_normalOut;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_normalOut_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  result = (float *)(float *) ((arg1)->m_normalOut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_userIdOut_set(void * jarg1, long long jarg2) {
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  long long arg2 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->m_userIdOut = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_userIdOut_get(void * jarg1) {
  long long jresult ;
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  long long result;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  result = (long long) ((arg1)->m_userIdOut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_userData_set(void * jarg1, void * jarg2) {
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserMeshCollisionRayHitDesc_m_userData_get(void * jarg1) {
  void * jresult ;
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  void *result = 0 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  result = (void *) ((arg1)->m_userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonUserMeshCollisionRayHitDesc() {
  void * jresult ;
  NewtonUserMeshCollisionRayHitDesc *result = 0 ;
  
  result = (NewtonUserMeshCollisionRayHitDesc *)new NewtonUserMeshCollisionRayHitDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonUserMeshCollisionRayHitDesc(void * jarg1) {
  NewtonUserMeshCollisionRayHitDesc *arg1 = (NewtonUserMeshCollisionRayHitDesc *) 0 ;
  
  arg1 = (NewtonUserMeshCollisionRayHitDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_accel_set(void * jarg1, float jarg2) {
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_accel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_accel_get(void * jarg1) {
  float jresult ;
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float result;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  result = (float) ((arg1)->m_accel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_minFriction_set(void * jarg1, float jarg2) {
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_minFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_minFriction_get(void * jarg1) {
  float jresult ;
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float result;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  result = (float) ((arg1)->m_minFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_maxFriction_set(void * jarg1, float jarg2) {
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_maxFriction_get(void * jarg1) {
  float jresult ;
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float result;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  result = (float) ((arg1)->m_maxFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_timestep_set(void * jarg1, float jarg2) {
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timestep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeSliderUpdateDesc_m_timestep_get(void * jarg1) {
  float jresult ;
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  float result;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  result = (float) ((arg1)->m_timestep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonHingeSliderUpdateDesc() {
  void * jresult ;
  NewtonHingeSliderUpdateDesc *result = 0 ;
  
  result = (NewtonHingeSliderUpdateDesc *)new NewtonHingeSliderUpdateDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonHingeSliderUpdateDesc(void * jarg1) {
  NewtonHingeSliderUpdateDesc *arg1 = (NewtonHingeSliderUpdateDesc *) 0 ;
  
  arg1 = (NewtonHingeSliderUpdateDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonClothPatchMaterial_m_damper_set(void * jarg1, float jarg2) {
  NewtonClothPatchMaterial *arg1 = (NewtonClothPatchMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonClothPatchMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damper = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonClothPatchMaterial_m_damper_get(void * jarg1) {
  float jresult ;
  NewtonClothPatchMaterial *arg1 = (NewtonClothPatchMaterial *) 0 ;
  float result;
  
  arg1 = (NewtonClothPatchMaterial *)jarg1; 
  result = (float) ((arg1)->m_damper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonClothPatchMaterial_m_stiffness_set(void * jarg1, float jarg2) {
  NewtonClothPatchMaterial *arg1 = (NewtonClothPatchMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonClothPatchMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_stiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonClothPatchMaterial_m_stiffness_get(void * jarg1) {
  float jresult ;
  NewtonClothPatchMaterial *arg1 = (NewtonClothPatchMaterial *) 0 ;
  float result;
  
  arg1 = (NewtonClothPatchMaterial *)jarg1; 
  result = (float) ((arg1)->m_stiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonClothPatchMaterial() {
  void * jresult ;
  NewtonClothPatchMaterial *result = 0 ;
  
  result = (NewtonClothPatchMaterial *)new NewtonClothPatchMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonClothPatchMaterial(void * jarg1) {
  NewtonClothPatchMaterial *arg1 = (NewtonClothPatchMaterial *) 0 ;
  
  arg1 = (NewtonClothPatchMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobian_m_linear_set(void * jarg1, void * jarg2) {
  NewtonSkeletonBoneJacobian *arg1 = (NewtonSkeletonBoneJacobian *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonSkeletonBoneJacobian *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_linear;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobian_m_linear_get(void * jarg1) {
  void * jresult ;
  NewtonSkeletonBoneJacobian *arg1 = (NewtonSkeletonBoneJacobian *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobian *)jarg1; 
  result = (float *)(float *) ((arg1)->m_linear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobian_m_angular_set(void * jarg1, void * jarg2) {
  NewtonSkeletonBoneJacobian *arg1 = (NewtonSkeletonBoneJacobian *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonSkeletonBoneJacobian *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_angular;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobian_m_angular_get(void * jarg1) {
  void * jresult ;
  NewtonSkeletonBoneJacobian *arg1 = (NewtonSkeletonBoneJacobian *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobian *)jarg1; 
  result = (float *)(float *) ((arg1)->m_angular);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonSkeletonBoneJacobian() {
  void * jresult ;
  NewtonSkeletonBoneJacobian *result = 0 ;
  
  result = (NewtonSkeletonBoneJacobian *)new NewtonSkeletonBoneJacobian();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonSkeletonBoneJacobian(void * jarg1) {
  NewtonSkeletonBoneJacobian *arg1 = (NewtonSkeletonBoneJacobian *) 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobian *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobianPair_m_j01_set(void * jarg1, void * jarg2) {
  NewtonSkeletonBoneJacobianPair *arg1 = (NewtonSkeletonBoneJacobianPair *) 0 ;
  NewtonSkeletonBoneJacobian *arg2 = (NewtonSkeletonBoneJacobian *) 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobianPair *)jarg1; 
  arg2 = (NewtonSkeletonBoneJacobian *)jarg2; 
  if (arg1) (arg1)->m_j01 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobianPair_m_j01_get(void * jarg1) {
  void * jresult ;
  NewtonSkeletonBoneJacobianPair *arg1 = (NewtonSkeletonBoneJacobianPair *) 0 ;
  NewtonSkeletonBoneJacobian *result = 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobianPair *)jarg1; 
  result = (NewtonSkeletonBoneJacobian *)& ((arg1)->m_j01);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobianPair_m_j10_set(void * jarg1, void * jarg2) {
  NewtonSkeletonBoneJacobianPair *arg1 = (NewtonSkeletonBoneJacobianPair *) 0 ;
  NewtonSkeletonBoneJacobian *arg2 = (NewtonSkeletonBoneJacobian *) 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobianPair *)jarg1; 
  arg2 = (NewtonSkeletonBoneJacobian *)jarg2; 
  if (arg1) (arg1)->m_j10 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonBoneJacobianPair_m_j10_get(void * jarg1) {
  void * jresult ;
  NewtonSkeletonBoneJacobianPair *arg1 = (NewtonSkeletonBoneJacobianPair *) 0 ;
  NewtonSkeletonBoneJacobian *result = 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobianPair *)jarg1; 
  result = (NewtonSkeletonBoneJacobian *)& ((arg1)->m_j10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonSkeletonBoneJacobianPair() {
  void * jresult ;
  NewtonSkeletonBoneJacobianPair *result = 0 ;
  
  result = (NewtonSkeletonBoneJacobianPair *)new NewtonSkeletonBoneJacobianPair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonSkeletonBoneJacobianPair(void * jarg1) {
  NewtonSkeletonBoneJacobianPair *arg1 = (NewtonSkeletonBoneJacobianPair *) 0 ;
  
  arg1 = (NewtonSkeletonBoneJacobianPair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserContactPoint_m_point_set(void * jarg1, void * jarg2) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_point;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserContactPoint_m_point_get(void * jarg1) {
  void * jresult ;
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  result = (float *)(float *) ((arg1)->m_point);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserContactPoint_m_normal_set(void * jarg1, void * jarg2) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  float *arg2 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_normal;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserContactPoint_m_normal_get(void * jarg1) {
  void * jresult ;
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  float *result = 0 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  result = (float *)(float *) ((arg1)->m_normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserContactPoint_m_shapeId0_set(void * jarg1, long long jarg2) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  long long arg2 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->m_shapeId0 = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NewtonUserContactPoint_m_shapeId0_get(void * jarg1) {
  long long jresult ;
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  long long result;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  result = (long long) ((arg1)->m_shapeId0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserContactPoint_m_shapeId1_set(void * jarg1, long long jarg2) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  long long arg2 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->m_shapeId1 = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NewtonUserContactPoint_m_shapeId1_get(void * jarg1) {
  long long jresult ;
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  long long result;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  result = (long long) ((arg1)->m_shapeId1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserContactPoint_m_penetration_set(void * jarg1, float jarg2) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  float arg2 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_penetration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUserContactPoint_m_penetration_get(void * jarg1) {
  float jresult ;
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  float result;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  result = (float) ((arg1)->m_penetration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserContactPoint_m_unused_set(void * jarg1, void * jarg2) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  int *arg2 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_unused;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonUserContactPoint_m_unused_get(void * jarg1) {
  void * jresult ;
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  int *result = 0 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  result = (int *)(int *) ((arg1)->m_unused);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewtonUserContactPoint() {
  void * jresult ;
  NewtonUserContactPoint *result = 0 ;
  
  result = (NewtonUserContactPoint *)new NewtonUserContactPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewtonUserContactPoint(void * jarg1) {
  NewtonUserContactPoint *arg1 = (NewtonUserContactPoint *) 0 ;
  
  arg1 = (NewtonUserContactPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonWorldGetVersion() {
  int jresult ;
  int result;
  
  result = (int)NewtonWorldGetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonWorldFloatSize() {
  int jresult ;
  int result;
  
  result = (int)NewtonWorldFloatSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonGetMemoryUsed() {
  int jresult ;
  int result;
  
  result = (int)NewtonGetMemoryUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetMemorySystem(void* jarg1, void* jarg2) {
  NewtonAllocMemory arg1 = (NewtonAllocMemory) 0 ;
  NewtonFreeMemory arg2 = (NewtonFreeMemory) 0 ;
  
  arg1 = (NewtonAllocMemory)jarg1; 
  arg2 = (NewtonFreeMemory)jarg2; 
  NewtonSetMemorySystem(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreate() {
  void * jresult ;
  NewtonWorld *result = 0 ;
  
  result = (NewtonWorld *)NewtonCreate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDestroy(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonDestroy((NewtonWorld const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDestroyAllBodies(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonDestroyAllBodies((NewtonWorld const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonAlloc(int jarg1) {
  void * jresult ;
  int arg1 ;
  void *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (void *)NewtonAlloc(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonFree(void * jarg1) {
  void *arg1 = (void *) (void *)0 ;
  
  arg1 = jarg1; 
  NewtonFree(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonEnumerateDevices(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonEnumerateDevices((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonGetCurrentDevice(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonGetCurrentDevice((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetCurrentDevice(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSetCurrentDevice((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonGetDeviceString(void * jarg1, int jarg2, char * jarg3, int jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  char *arg3 = (char *) (char *)0 ;
  int arg4 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  NewtonGetDeviceString((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonGetContactMergeTolerance(void * jarg1) {
  float jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (float)NewtonGetContactMergeTolerance((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetContactMergeTolerance(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonSetContactMergeTolerance((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonInvalidateCache(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonInvalidateCache((NewtonWorld const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetSolverModel(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSetSolverModel((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetSolverConvergenceQuality(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSetSolverConvergenceQuality((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetMultiThreadSolverOnSingleIsland(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSetMultiThreadSolverOnSingleIsland((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonGetMultiThreadSolverOnSingleIsland(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonGetMultiThreadSolverOnSingleIsland((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonGetBroadphaseAlgorithm(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonGetBroadphaseAlgorithm((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSelectBroadphaseAlgorithm(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSelectBroadphaseAlgorithm((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUpdate(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonUpdate((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUpdateAsync(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonUpdateAsync((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWaitForUpdateToFinish(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonWaitForUpdateToFinish((NewtonWorld const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSerializeToFile(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  NewtonOnBodySerializationCallback arg3 = (NewtonOnBodySerializationCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (NewtonOnBodySerializationCallback)jarg3; 
  arg4 = jarg4; 
  NewtonSerializeToFile((NewtonWorld const *)arg1,(char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeserializeFromFile(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  NewtonOnBodyDeserializationCallback arg3 = (NewtonOnBodyDeserializationCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (NewtonOnBodyDeserializationCallback)jarg3; 
  arg4 = jarg4; 
  NewtonDeserializeFromFile((NewtonWorld const *)arg1,(char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetJointSerializationCallbacks(void * jarg1, void * jarg2, void * jarg3) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonOnJointSerializationCallback arg2 = (NewtonOnJointSerializationCallback) 0 ;
  NewtonOnJointDeserializationCallback arg3 = (NewtonOnJointDeserializationCallback) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonOnJointSerializationCallback)jarg2; 
  arg3 = (NewtonOnJointDeserializationCallback)jarg3; 
  NewtonSetJointSerializationCallbacks((NewtonWorld const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonGetJointSerializationCallbacks(void * jarg1, void * jarg2, void * jarg3) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonOnJointSerializationCallback *arg2 = (NewtonOnJointSerializationCallback *) (NewtonOnJointSerializationCallback *)0 ;
  NewtonOnJointDeserializationCallback *arg3 = (NewtonOnJointDeserializationCallback *) (NewtonOnJointDeserializationCallback *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonOnJointSerializationCallback *)jarg2; 
  arg3 = (NewtonOnJointDeserializationCallback *)jarg3; 
  NewtonGetJointSerializationCallbacks((NewtonWorld const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldCriticalSectionLock(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonWorldCriticalSectionLock((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldCriticalSectionUnlock(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonWorldCriticalSectionUnlock((NewtonWorld const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetThreadsCount(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSetThreadsCount((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonGetThreadsCount(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonGetThreadsCount((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonGetMaxThreadsCount(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonGetMaxThreadsCount((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDispachThreadJob(void * jarg1, void * jarg2, void * jarg3) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonJobTask arg2 = (NewtonJobTask) 0 ;
  void *arg3 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonJobTask)jarg2; 
  arg3 = jarg3; 
  NewtonDispachThreadJob((NewtonWorld const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSyncThreadJobs(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonSyncThreadJobs((NewtonWorld const *)arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonAtomicAdd(void * jarg1, int jarg2) {
  int jresult ;
  int *arg1 = (int *) (int *)0 ;
  int arg2 ;
  int result;
  
  arg1 = (int *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)NewtonAtomicAdd(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonAtomicSwap(void * jarg1, int jarg2) {
  int jresult ;
  int *arg1 = (int *) (int *)0 ;
  int arg2 ;
  int result;
  
  arg1 = (int *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)NewtonAtomicSwap(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonYield() {
  NewtonYield();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetFrictionModel(void * jarg1, int jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSetFrictionModel((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetMinimumFrameRate(void * jarg1, float jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonSetMinimumFrameRate((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetIslandUpdateEvent(void * jarg1, void * jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonIslandUpdate arg2 = (NewtonIslandUpdate) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonIslandUpdate)jarg2; 
  NewtonSetIslandUpdateEvent((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldForEachJointDo(void * jarg1, void * jarg2, void * jarg3) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonJointIterator arg2 = (NewtonJointIterator) 0 ;
  void *arg3 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonJointIterator)jarg2; 
  arg3 = jarg3; 
  NewtonWorldForEachJointDo((NewtonWorld const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldForEachBodyInAABBDo(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonBodyIterator arg4 = (NewtonBodyIterator) 0 ;
  void *arg5 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonBodyIterator)jarg4; 
  arg5 = jarg5; 
  NewtonWorldForEachBodyInAABBDo((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldSetUserData(void * jarg1, void * jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = jarg2; 
  NewtonWorldSetUserData((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetUserData(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (void *)NewtonWorldGetUserData((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetListenerUserData(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonWorldGetListenerUserData((NewtonWorld const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldListenerGetBodyDestroyCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  void *arg2 = (void *) (void *)0 ;
  NewtonWorldListenerBodyDestroyCallback result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = jarg2; 
  result = (NewtonWorldListenerBodyDestroyCallback)NewtonWorldListenerGetBodyDestroyCallback((NewtonWorld const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldListenerSetBodyDestroyCallback(void * jarg1, void * jarg2, void * jarg3) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  void *arg2 = (void *) (void *)0 ;
  NewtonWorldListenerBodyDestroyCallback arg3 = (NewtonWorldListenerBodyDestroyCallback) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = jarg2; 
  arg3 = (NewtonWorldListenerBodyDestroyCallback)jarg3; 
  NewtonWorldListenerSetBodyDestroyCallback((NewtonWorld const *)arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetPreListener(void * jarg1, char * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (void *)NewtonWorldGetPreListener((NewtonWorld const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldAddPreListener(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  void *arg3 = (void *) (void *)0 ;
  NewtonWorldUpdateListenerCallback arg4 = (NewtonWorldUpdateListenerCallback) 0 ;
  NewtonWorldDestroyListenerCallback arg5 = (NewtonWorldDestroyListenerCallback) 0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3; 
  arg4 = (NewtonWorldUpdateListenerCallback)jarg4; 
  arg5 = (NewtonWorldDestroyListenerCallback)jarg5; 
  result = (void *)NewtonWorldAddPreListener((NewtonWorld const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetPostListener(void * jarg1, char * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (void *)NewtonWorldGetPostListener((NewtonWorld const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldAddPostListener(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  void *arg3 = (void *) (void *)0 ;
  NewtonWorldUpdateListenerCallback arg4 = (NewtonWorldUpdateListenerCallback) 0 ;
  NewtonWorldDestroyListenerCallback arg5 = (NewtonWorldDestroyListenerCallback) 0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3; 
  arg4 = (NewtonWorldUpdateListenerCallback)jarg4; 
  arg5 = (NewtonWorldDestroyListenerCallback)jarg5; 
  result = (void *)NewtonWorldAddPostListener((NewtonWorld const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldSetDestructorCallback(void * jarg1, void * jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonWorldDestructorCallback arg2 = (NewtonWorldDestructorCallback) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonWorldDestructorCallback)jarg2; 
  NewtonWorldSetDestructorCallback((NewtonWorld const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetDestructorCallback(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonWorldDestructorCallback result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (NewtonWorldDestructorCallback)NewtonWorldGetDestructorCallback((NewtonWorld const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldSetCollisionConstructorDestructorCallback(void * jarg1, void * jarg2, void * jarg3) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollisionCopyConstructionCallback arg2 = (NewtonCollisionCopyConstructionCallback) 0 ;
  NewtonCollisionDestructorCallback arg3 = (NewtonCollisionDestructorCallback) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollisionCopyConstructionCallback)jarg2; 
  arg3 = (NewtonCollisionDestructorCallback)jarg3; 
  NewtonWorldSetCollisionConstructorDestructorCallback((NewtonWorld const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonWorldRayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonWorldRayFilterCallback arg4 = (NewtonWorldRayFilterCallback) 0 ;
  void *arg5 = (void *) (void *)0 ;
  NewtonWorldRayPrefilterCallback arg6 = (NewtonWorldRayPrefilterCallback) 0 ;
  int arg7 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonWorldRayFilterCallback)jarg4; 
  arg5 = jarg5; 
  arg6 = (NewtonWorldRayPrefilterCallback)jarg6; 
  arg7 = (int)jarg7; 
  NewtonWorldRayCast((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonWorldConvexCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, int jarg9, int jarg10) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonCollision *arg4 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg5 = (float *) (float *)0 ;
  void *arg6 = (void *) (void *)0 ;
  NewtonWorldRayPrefilterCallback arg7 = (NewtonWorldRayPrefilterCallback) 0 ;
  NewtonWorldConvexCastReturnInfo *arg8 = (NewtonWorldConvexCastReturnInfo *) (NewtonWorldConvexCastReturnInfo *)0 ;
  int arg9 ;
  int arg10 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonCollision *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = jarg6; 
  arg7 = (NewtonWorldRayPrefilterCallback)jarg7; 
  arg8 = (NewtonWorldConvexCastReturnInfo *)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  result = (int)NewtonWorldConvexCast((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,(NewtonCollision const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonWorldCollide(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) (float *)0 ;
  NewtonCollision *arg3 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg4 = (void *) (void *)0 ;
  NewtonWorldRayPrefilterCallback arg5 = (NewtonWorldRayPrefilterCallback) 0 ;
  NewtonWorldConvexCastReturnInfo *arg6 = (NewtonWorldConvexCastReturnInfo *) (NewtonWorldConvexCastReturnInfo *)0 ;
  int arg7 ;
  int arg8 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (NewtonCollision *)jarg3; 
  arg4 = jarg4; 
  arg5 = (NewtonWorldRayPrefilterCallback)jarg5; 
  arg6 = (NewtonWorldConvexCastReturnInfo *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (int)NewtonWorldCollide((NewtonWorld const *)arg1,(float const *)arg2,(NewtonCollision const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonWorldGetBodyCount(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonWorldGetBodyCount((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonWorldGetConstraintCount(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonWorldGetConstraintCount((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonIslandGetBody(void * jarg1, int jarg2) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  int arg2 ;
  NewtonBody *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  result = (NewtonBody *)NewtonIslandGetBody((void const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonIslandGetBodyAABB(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void *arg1 = (void *) (void *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonIslandGetBodyAABB((void const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMaterialCreateGroupID(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonMaterialCreateGroupID((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMaterialGetDefaultGroupID(void * jarg1) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (int)NewtonMaterialGetDefaultGroupID((NewtonWorld const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialDestroyAllGroupID(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  NewtonMaterialDestroyAllGroupID((NewtonWorld const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMaterialGetUserData(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (void *)NewtonMaterialGetUserData((NewtonWorld const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetSurfaceThickness(void * jarg1, int jarg2, int jarg3, float jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  NewtonMaterialSetSurfaceThickness((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetCallbackUserData(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4; 
  NewtonMaterialSetCallbackUserData((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactGenerationCallback(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  NewtonOnContactGeneration arg4 = (NewtonOnContactGeneration) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (NewtonOnContactGeneration)jarg4; 
  NewtonMaterialSetContactGenerationCallback((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetCompoundCollisionCallback(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  NewtonOnCompoundSubCollisionAABBOverlap arg4 = (NewtonOnCompoundSubCollisionAABBOverlap) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (NewtonOnCompoundSubCollisionAABBOverlap)jarg4; 
  NewtonMaterialSetCompoundCollisionCallback((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetCollisionCallback(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  NewtonOnAABBOverlap arg4 = (NewtonOnAABBOverlap) 0 ;
  NewtonContactsProcess arg5 = (NewtonContactsProcess) 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (NewtonOnAABBOverlap)jarg4; 
  arg5 = (NewtonContactsProcess)jarg5; 
  NewtonMaterialSetCollisionCallback((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetDefaultSoftness(void * jarg1, int jarg2, int jarg3, float jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  NewtonMaterialSetDefaultSoftness((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetDefaultElasticity(void * jarg1, int jarg2, int jarg3, float jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  NewtonMaterialSetDefaultElasticity((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetDefaultCollidable(void * jarg1, int jarg2, int jarg3, int jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  NewtonMaterialSetDefaultCollidable((NewtonWorld const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetDefaultFriction(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  NewtonMaterialSetDefaultFriction((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetFirstMaterial(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMaterial *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (NewtonMaterial *)NewtonWorldGetFirstMaterial((NewtonWorld const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetNextMaterial(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMaterial *arg2 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  NewtonMaterial *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMaterial *)jarg2; 
  result = (NewtonMaterial *)NewtonWorldGetNextMaterial((NewtonWorld const *)arg1,(NewtonMaterial const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetFirstBody(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (NewtonBody *)NewtonWorldGetFirstBody((NewtonWorld const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonWorldGetNextBody(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  result = (NewtonBody *)NewtonWorldGetNextBody((NewtonWorld const *)arg1,(NewtonBody const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMaterialGetMaterialPairUserData(void * jarg1) {
  void * jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  result = (void *)NewtonMaterialGetMaterialPairUserData((NewtonMaterial const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NewtonMaterialGetContactFaceAttribute(void * jarg1) {
  unsigned int jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  unsigned int result;
  
  arg1 = (NewtonMaterial *)jarg1; 
  result = (unsigned int)NewtonMaterialGetContactFaceAttribute((NewtonMaterial const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMaterialGetBodyCollidingShape(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  result = (NewtonCollision *)NewtonMaterialGetBodyCollidingShape((NewtonMaterial const *)arg1,(NewtonBody const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonMaterialGetContactNormalSpeed(void * jarg1) {
  float jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float result;
  
  arg1 = (NewtonMaterial *)jarg1; 
  result = (float)NewtonMaterialGetContactNormalSpeed((NewtonMaterial const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialGetContactForce(void * jarg1, void * jarg2, void * jarg3) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonMaterialGetContactForce((NewtonMaterial const *)arg1,(NewtonBody const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialGetContactPositionAndNormal(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonMaterialGetContactPositionAndNormal((NewtonMaterial const *)arg1,(NewtonBody const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialGetContactTangentDirections(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonMaterialGetContactTangentDirections((NewtonMaterial const *)arg1,(NewtonBody const *)arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonMaterialGetContactTangentSpeed(void * jarg1, int jarg2) {
  float jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  int arg2 ;
  float result;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)NewtonMaterialGetContactTangentSpeed((NewtonMaterial const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonMaterialGetContactMaxNormalImpact(void * jarg1) {
  float jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float result;
  
  arg1 = (NewtonMaterial *)jarg1; 
  result = (float)NewtonMaterialGetContactMaxNormalImpact((NewtonMaterial const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonMaterialGetContactMaxTangentImpact(void * jarg1, int jarg2) {
  float jresult ;
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  int arg2 ;
  float result;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)NewtonMaterialGetContactMaxTangentImpact((NewtonMaterial const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactSoftness(void * jarg1, float jarg2) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float arg2 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonMaterialSetContactSoftness((NewtonMaterial const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactElasticity(void * jarg1, float jarg2) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float arg2 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonMaterialSetContactElasticity((NewtonMaterial const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactFrictionState(void * jarg1, int jarg2, int jarg3) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  NewtonMaterialSetContactFrictionState((NewtonMaterial const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactFrictionCoef(void * jarg1, float jarg2, float jarg3, int jarg4) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  NewtonMaterialSetContactFrictionCoef((NewtonMaterial const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactNormalAcceleration(void * jarg1, float jarg2) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float arg2 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonMaterialSetContactNormalAcceleration((NewtonMaterial const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactNormalDirection(void * jarg1, void * jarg2) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonMaterialSetContactNormalDirection((NewtonMaterial const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactPosition(void * jarg1, void * jarg2) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonMaterialSetContactPosition((NewtonMaterial const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactTangentFriction(void * jarg1, float jarg2, int jarg3) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  NewtonMaterialSetContactTangentFriction((NewtonMaterial const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialSetContactTangentAcceleration(void * jarg1, float jarg2, int jarg3) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  NewtonMaterialSetContactTangentAcceleration((NewtonMaterial const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMaterialContactRotateTangentDirections(void * jarg1, void * jarg2) {
  NewtonMaterial *arg1 = (NewtonMaterial *) (NewtonMaterial *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonMaterial *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonMaterialContactRotateTangentDirections((NewtonMaterial const *)arg1,(float const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateNull(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (NewtonCollision *)NewtonCreateNull((NewtonWorld const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateSphere(void * jarg1, float jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  int arg3 ;
  float *arg4 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  result = (NewtonCollision *)NewtonCreateSphere((NewtonWorld const *)arg1,arg2,arg3,(float const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateBox(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  float *arg6 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (NewtonCollision *)NewtonCreateBox((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateCone(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  float *arg5 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  result = (NewtonCollision *)NewtonCreateCone((NewtonWorld const *)arg1,arg2,arg3,arg4,(float const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateCapsule(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  float *arg6 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (NewtonCollision *)NewtonCreateCapsule((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateCylinder(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  float *arg6 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (NewtonCollision *)NewtonCreateCylinder((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateChamferCylinder(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  float *arg5 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  result = (NewtonCollision *)NewtonCreateChamferCylinder((NewtonWorld const *)arg1,arg2,arg3,arg4,(float const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateConvexHull(void * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5, int jarg6, void * jarg7) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  float arg5 ;
  int arg6 ;
  float *arg7 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float *)jarg7; 
  result = (NewtonCollision *)NewtonCreateConvexHull((NewtonWorld const *)arg1,arg2,(float const *)arg3,arg4,arg5,arg6,(float const *)arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateConvexHullFromMesh(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  float arg3 ;
  int arg4 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (NewtonCollision *)NewtonCreateConvexHullFromMesh((NewtonWorld const *)arg1,(NewtonMesh const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionGetMode(void * jarg1) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (int)NewtonCollisionGetMode((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSetMode(void * jarg1, int jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonCollisionSetMode((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonConvexHullGetFaceIndices(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  int *arg3 = (int *) (int *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)NewtonConvexHullGetFaceIndices((NewtonCollision const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonConvexHullGetVertexData(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float **arg2 = (float **) (float **)0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float **)jarg2; 
  arg3 = (int *)jarg3; 
  result = (int)NewtonConvexHullGetVertexData((NewtonCollision const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonConvexCollisionCalculateVolume(void * jarg1) {
  float jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (float)NewtonConvexCollisionCalculateVolume((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConvexCollisionCalculateInertialMatrix(void * jarg1, void * jarg2, void * jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonConvexCollisionCalculateInertialMatrix((NewtonCollision const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonConvexCollisionCalculateBuoyancyAcceleration(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6, float jarg7, void * jarg8, void * jarg9) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  float *arg5 = (float *) (float *)0 ;
  float arg6 ;
  float arg7 ;
  float *arg8 = (float *) (float *)0 ;
  float *arg9 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (float *)jarg9; 
  NewtonConvexCollisionCalculateBuoyancyAcceleration((NewtonCollision const *)arg1,(float const *)arg2,(float const *)arg3,(float const *)arg4,(float const *)arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionDataPointer(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (void *)NewtonCollisionDataPointer((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateCompoundCollision(void * jarg1, int jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  result = (NewtonCollision *)NewtonCreateCompoundCollision((NewtonWorld const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateCompoundCollisionFromMesh(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (NewtonCollision *)NewtonCreateCompoundCollisionFromMesh((NewtonWorld const *)arg1,(NewtonMesh const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCompoundCollisionBeginAddRemove(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonCompoundCollisionBeginAddRemove(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCompoundCollisionAddSubCollision(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  result = (void *)NewtonCompoundCollisionAddSubCollision(arg1,(NewtonCollision const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCompoundCollisionRemoveSubCollision(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  NewtonCompoundCollisionRemoveSubCollision(arg1,(void const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCompoundCollisionRemoveSubCollisionByIndex(void * jarg1, int jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonCompoundCollisionRemoveSubCollisionByIndex(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCompoundCollisionSetSubCollisionMatrix(void * jarg1, void * jarg2, void * jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  NewtonCompoundCollisionSetSubCollisionMatrix(arg1,(void const *)arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCompoundCollisionEndAddRemove(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonCompoundCollisionEndAddRemove(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCompoundCollisionGetFirstNode(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (void *)NewtonCompoundCollisionGetFirstNode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCompoundCollisionGetNextNode(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonCompoundCollisionGetNextNode(arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCompoundCollisionGetNodeByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)NewtonCompoundCollisionGetNodeByIndex(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCompoundCollisionGetNodeIndex(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonCompoundCollisionGetNodeIndex(arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCompoundCollisionGetCollisionFromNode(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (NewtonCollision *)NewtonCompoundCollisionGetCollisionFromNode(arg1,(void const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateFracturedCompoundCollision(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, int jarg7, int jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) (float *)0 ;
  int arg7 ;
  int arg8 ;
  float *arg9 = (float *) (float *)0 ;
  NewtonFractureCompoundCollisionReconstructMainMeshCallBack arg10 = (NewtonFractureCompoundCollisionReconstructMainMeshCallBack) 0 ;
  NewtonFractureCompoundCollisionOnEmitCompoundFractured arg11 = (NewtonFractureCompoundCollisionOnEmitCompoundFractured) 0 ;
  NewtonFractureCompoundCollisionOnEmitChunk arg12 = (NewtonFractureCompoundCollisionOnEmitChunk) 0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float *)jarg9; 
  arg10 = (NewtonFractureCompoundCollisionReconstructMainMeshCallBack)jarg10; 
  arg11 = (NewtonFractureCompoundCollisionOnEmitCompoundFractured)jarg11; 
  arg12 = (NewtonFractureCompoundCollisionOnEmitChunk)jarg12; 
  result = (NewtonCollision *)NewtonCreateFracturedCompoundCollision((NewtonWorld const *)arg1,(NewtonMesh const *)arg2,arg3,arg4,arg5,(float const *)arg6,arg7,arg8,(float const *)arg9,arg10,arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundPlaneClip(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (NewtonCollision *)NewtonFracturedCompoundPlaneClip((NewtonCollision const *)arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonFracturedCompoundSetCallbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFractureCompoundCollisionReconstructMainMeshCallBack arg2 = (NewtonFractureCompoundCollisionReconstructMainMeshCallBack) 0 ;
  NewtonFractureCompoundCollisionOnEmitCompoundFractured arg3 = (NewtonFractureCompoundCollisionOnEmitCompoundFractured) 0 ;
  NewtonFractureCompoundCollisionOnEmitChunk arg4 = (NewtonFractureCompoundCollisionOnEmitChunk) 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFractureCompoundCollisionReconstructMainMeshCallBack)jarg2; 
  arg3 = (NewtonFractureCompoundCollisionOnEmitCompoundFractured)jarg3; 
  arg4 = (NewtonFractureCompoundCollisionOnEmitChunk)jarg4; 
  NewtonFracturedCompoundSetCallbacks((NewtonCollision const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonFracturedCompoundIsNodeFreeToDetach(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonFracturedCompoundIsNodeFreeToDetach((NewtonCollision const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonFracturedCompoundNeighborNodeList(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void **arg3 = (void **) (void **)0 ;
  int arg4 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  arg3 = (void **)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)NewtonFracturedCompoundNeighborNodeList((NewtonCollision const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundGetMainMesh(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (NewtonFracturedCompoundMeshPart *)NewtonFracturedCompoundGetMainMesh((NewtonCollision const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundGetFirstSubMesh(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (NewtonFracturedCompoundMeshPart *)NewtonFracturedCompoundGetFirstSubMesh((NewtonCollision const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundGetNextSubMesh(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *arg2 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  NewtonFracturedCompoundMeshPart *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFracturedCompoundMeshPart *)jarg2; 
  result = (NewtonFracturedCompoundMeshPart *)NewtonFracturedCompoundGetNextSubMesh((NewtonCollision const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonFracturedCompoundCollisionGetVertexCount(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *arg2 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFracturedCompoundMeshPart *)jarg2; 
  result = (int)NewtonFracturedCompoundCollisionGetVertexCount((NewtonCollision const *)arg1,(NewtonFracturedCompoundMeshPart const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundCollisionGetVertexPositions(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *arg2 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  float *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFracturedCompoundMeshPart *)jarg2; 
  result = (float *)NewtonFracturedCompoundCollisionGetVertexPositions((NewtonCollision const *)arg1,(NewtonFracturedCompoundMeshPart const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundCollisionGetVertexNormals(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *arg2 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  float *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFracturedCompoundMeshPart *)jarg2; 
  result = (float *)NewtonFracturedCompoundCollisionGetVertexNormals((NewtonCollision const *)arg1,(NewtonFracturedCompoundMeshPart const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundCollisionGetVertexUVs(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *arg2 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  float *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFracturedCompoundMeshPart *)jarg2; 
  result = (float *)NewtonFracturedCompoundCollisionGetVertexUVs((NewtonCollision const *)arg1,(NewtonFracturedCompoundMeshPart const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonFracturedCompoundMeshPartGetIndexStream(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonFracturedCompoundMeshPart *arg2 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  void *arg3 = (void *) (void *)0 ;
  int *arg4 = (int *) (int *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonFracturedCompoundMeshPart *)jarg2; 
  arg3 = jarg3; 
  arg4 = (int *)jarg4; 
  result = (int)NewtonFracturedCompoundMeshPartGetIndexStream((NewtonCollision const *)arg1,(NewtonFracturedCompoundMeshPart const *)arg2,(void const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundMeshPartGetFirstSegment(void * jarg1) {
  void * jresult ;
  NewtonFracturedCompoundMeshPart *arg1 = (NewtonFracturedCompoundMeshPart *) (NewtonFracturedCompoundMeshPart *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonFracturedCompoundMeshPart *)jarg1; 
  result = (void *)NewtonFracturedCompoundMeshPartGetFirstSegment((NewtonFracturedCompoundMeshPart const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonFracturedCompoundMeshPartGetNextSegment(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = jarg1; 
  result = (void *)NewtonFracturedCompoundMeshPartGetNextSegment((void const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonFracturedCompoundMeshPartGetMaterial(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) (void *)0 ;
  int result;
  
  arg1 = jarg1; 
  result = (int)NewtonFracturedCompoundMeshPartGetMaterial((void const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonFracturedCompoundMeshPartGetIndexCount(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) (void *)0 ;
  int result;
  
  arg1 = jarg1; 
  result = (int)NewtonFracturedCompoundMeshPartGetIndexCount((void const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateSceneCollision(void * jarg1, int jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  result = (NewtonCollision *)NewtonCreateSceneCollision((NewtonWorld const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSceneCollisionBeginAddRemove(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonSceneCollisionBeginAddRemove(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSceneCollisionAddSubCollision(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  result = (void *)NewtonSceneCollisionAddSubCollision(arg1,(NewtonCollision const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSceneCollisionRemoveSubCollision(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  NewtonSceneCollisionRemoveSubCollision(arg1,(void const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSceneCollisionRemoveSubCollisionByIndex(void * jarg1, int jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSceneCollisionRemoveSubCollisionByIndex(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSceneCollisionSetSubCollisionMatrix(void * jarg1, void * jarg2, void * jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  NewtonSceneCollisionSetSubCollisionMatrix(arg1,(void const *)arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSceneCollisionEndAddRemove(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonSceneCollisionEndAddRemove(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSceneCollisionGetFirstNode(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (void *)NewtonSceneCollisionGetFirstNode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSceneCollisionGetNextNode(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonSceneCollisionGetNextNode(arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSceneCollisionGetNodeByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)NewtonSceneCollisionGetNodeByIndex(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonSceneCollisionGetNodeIndex(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonSceneCollisionGetNodeIndex(arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSceneCollisionGetCollisionFromNode(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  result = (NewtonCollision *)NewtonSceneCollisionGetCollisionFromNode(arg1,(void const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateUserMeshCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, int jarg12) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  void *arg4 = (void *) (void *)0 ;
  NewtonUserMeshCollisionCollideCallback arg5 = (NewtonUserMeshCollisionCollideCallback) 0 ;
  NewtonUserMeshCollisionRayHitCallback arg6 = (NewtonUserMeshCollisionRayHitCallback) 0 ;
  NewtonUserMeshCollisionDestroyCallback arg7 = (NewtonUserMeshCollisionDestroyCallback) 0 ;
  NewtonUserMeshCollisionGetCollisionInfo arg8 = (NewtonUserMeshCollisionGetCollisionInfo) 0 ;
  NewtonUserMeshCollisionAABBTest arg9 = (NewtonUserMeshCollisionAABBTest) 0 ;
  NewtonUserMeshCollisionGetFacesInAABB arg10 = (NewtonUserMeshCollisionGetFacesInAABB) 0 ;
  NewtonOnUserCollisionSerializationCallback arg11 = (NewtonOnUserCollisionSerializationCallback) 0 ;
  int arg12 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = jarg4; 
  arg5 = (NewtonUserMeshCollisionCollideCallback)jarg5; 
  arg6 = (NewtonUserMeshCollisionRayHitCallback)jarg6; 
  arg7 = (NewtonUserMeshCollisionDestroyCallback)jarg7; 
  arg8 = (NewtonUserMeshCollisionGetCollisionInfo)jarg8; 
  arg9 = (NewtonUserMeshCollisionAABBTest)jarg9; 
  arg10 = (NewtonUserMeshCollisionGetFacesInAABB)jarg10; 
  arg11 = (NewtonOnUserCollisionSerializationCallback)jarg11; 
  arg12 = (int)jarg12; 
  result = (NewtonCollision *)NewtonCreateUserMeshCollision((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonUserMeshCollisionContinuousOverlapTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  NewtonUserMeshCollisionCollideDesc *arg1 = (NewtonUserMeshCollisionCollideDesc *) (NewtonUserMeshCollisionCollideDesc *)0 ;
  void *arg2 = (void *) (void *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  int result;
  
  arg1 = (NewtonUserMeshCollisionCollideDesc *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  result = (int)NewtonUserMeshCollisionContinuousOverlapTest((NewtonUserMeshCollisionCollideDesc const *)arg1,(void const *)arg2,(float const *)arg3,(float const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateCollisionFromSerialization(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonDeserializeCallback arg2 = (NewtonDeserializeCallback) 0 ;
  void *arg3 = (void *) (void *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonDeserializeCallback)jarg2; 
  arg3 = jarg3; 
  result = (NewtonCollision *)NewtonCreateCollisionFromSerialization((NewtonWorld const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSerialize(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonSerializeCallback arg3 = (NewtonSerializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  arg3 = (NewtonSerializeCallback)jarg3; 
  arg4 = jarg4; 
  NewtonCollisionSerialize((NewtonWorld const *)arg1,(NewtonCollision const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionGetInfo(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollisionInfoRecord *arg2 = (NewtonCollisionInfoRecord *) (NewtonCollisionInfoRecord *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonCollisionInfoRecord *)jarg2; 
  NewtonCollisionGetInfo((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateHeightFieldCollision(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, char * jarg7, float jarg8, float jarg9, int jarg10) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) (void *)0 ;
  char *arg7 = (char *) (char *)0 ;
  float arg8 ;
  float arg9 ;
  int arg10 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (int)jarg10; 
  result = (NewtonCollision *)NewtonCreateHeightFieldCollision((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(char const *)arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldSetUserRayCastCallback(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonHeightFieldRayCastCallback arg2 = (NewtonHeightFieldRayCastCallback) 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonHeightFieldRayCastCallback)jarg2; 
  NewtonHeightFieldSetUserRayCastCallback((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHeightFieldSetHorizontalDisplacement(void * jarg1, void * jarg2, float jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  unsigned short *arg2 = (unsigned short *) (unsigned short *)0 ;
  float arg3 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (float)jarg3; 
  NewtonHeightFieldSetHorizontalDisplacement((NewtonCollision const *)arg1,(unsigned short const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateTreeCollision(void * jarg1, int jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  result = (NewtonCollision *)NewtonCreateTreeCollision((NewtonWorld const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateTreeCollisionFromMesh(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg3 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (int)jarg3; 
  result = (NewtonCollision *)NewtonCreateTreeCollisionFromMesh((NewtonWorld const *)arg1,(NewtonMesh const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonTreeCollisionSetUserRayCastCallback(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollisionTreeRayCastCallback arg2 = (NewtonCollisionTreeRayCastCallback) 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonCollisionTreeRayCastCallback)jarg2; 
  NewtonTreeCollisionSetUserRayCastCallback((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonTreeCollisionBeginBuild(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonTreeCollisionBeginBuild((NewtonCollision const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonTreeCollisionAddFace(void * jarg1, int jarg2, void * jarg3, int jarg4, int jarg5) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  NewtonTreeCollisionAddFace((NewtonCollision const *)arg1,arg2,(float const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonTreeCollisionEndBuild(void * jarg1, int jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonTreeCollisionEndBuild((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonTreeCollisionGetFaceAttribute(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)NewtonTreeCollisionGetFaceAttribute((NewtonCollision const *)arg1,(int const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonTreeCollisionSetFaceAttribute(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  NewtonTreeCollisionSetFaceAttribute((NewtonCollision const *)arg1,(int const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonTreeCollisionForEachFace(void * jarg1, void * jarg2, void * jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonTreeCollisionFaceCallback arg2 = (NewtonTreeCollisionFaceCallback) 0 ;
  void *arg3 = (void *) (void *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonTreeCollisionFaceCallback)jarg2; 
  arg3 = jarg3; 
  NewtonTreeCollisionForEachFace((NewtonCollision const *)arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonTreeCollisionGetVertexListTriangleListInAABB(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float **arg4 = (float **) (float **)0 ;
  int *arg5 = (int *) (int *)0 ;
  int *arg6 = (int *) (int *)0 ;
  int *arg7 = (int *) (int *)0 ;
  int arg8 ;
  int *arg9 = (int *) (int *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float **)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int *)jarg9; 
  result = (int)NewtonTreeCollisionGetVertexListTriangleListInAABB((NewtonCollision const *)arg1,(float const *)arg2,(float const *)arg3,(float const **)arg4,arg5,arg6,(int const *)arg7,arg8,(int const *)arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonStaticCollisionSetDebugCallback(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonTreeCollisionCallback arg2 = (NewtonTreeCollisionCallback) 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonTreeCollisionCallback)jarg2; 
  NewtonStaticCollisionSetDebugCallback((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionCreateInstance(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (NewtonCollision *)NewtonCollisionCreateInstance((NewtonCollision const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionGetType(void * jarg1) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (int)NewtonCollisionGetType((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionIsConvexShape(void * jarg1) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (int)NewtonCollisionIsConvexShape((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionIsStaticShape(void * jarg1) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (int)NewtonCollisionIsStaticShape((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSetUserData(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  NewtonCollisionSetUserData((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionGetUserData(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (void *)NewtonCollisionGetUserData((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSetUserData1(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = jarg2; 
  NewtonCollisionSetUserData1((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionGetUserData1(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (void *)NewtonCollisionGetUserData1((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSetUserID(void * jarg1, unsigned int jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  unsigned int arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  NewtonCollisionSetUserID((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NewtonCollisionGetUserID(void * jarg1) {
  unsigned int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  unsigned int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (unsigned int)NewtonCollisionGetUserID((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionGetSubCollisionHandle(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (void *)NewtonCollisionGetSubCollisionHandle((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionGetParentInstance(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (NewtonCollision *)NewtonCollisionGetParentInstance((NewtonCollision const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSetMatrix(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonCollisionSetMatrix((NewtonCollision const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionGetMatrix(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonCollisionGetMatrix((NewtonCollision const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSetScale(void * jarg1, float jarg2, float jarg3, float jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  NewtonCollisionSetScale((NewtonCollision const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionGetScale(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonCollisionGetScale((NewtonCollision const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDestroyCollision(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonDestroyCollision((NewtonCollision const *)arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCollisionGetSkinThickness(void * jarg1) {
  float jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (float)NewtonCollisionGetSkinThickness((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionIntersectionTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonCollision *arg4 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg5 = (float *) (float *)0 ;
  int arg6 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonCollision *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)NewtonCollisionIntersectionTest((NewtonWorld const *)arg1,(NewtonCollision const *)arg2,(float const *)arg3,(NewtonCollision const *)arg4,(float const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionPointDistance(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, int jarg7) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) (float *)0 ;
  NewtonCollision *arg3 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg4 = (float *) (float *)0 ;
  float *arg5 = (float *) (float *)0 ;
  float *arg6 = (float *) (float *)0 ;
  int arg7 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (NewtonCollision *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)NewtonCollisionPointDistance((NewtonWorld const *)arg1,(float const *)arg2,(NewtonCollision const *)arg3,(float const *)arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionClosestPoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, int jarg9) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonCollision *arg4 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg5 = (float *) (float *)0 ;
  float *arg6 = (float *) (float *)0 ;
  float *arg7 = (float *) (float *)0 ;
  float *arg8 = (float *) (float *)0 ;
  int arg9 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonCollision *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int)jarg9; 
  result = (int)NewtonCollisionClosestPoint((NewtonWorld const *)arg1,(NewtonCollision const *)arg2,(float const *)arg3,(NewtonCollision const *)arg4,(float const *)arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionCollide(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, int jarg12) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  NewtonCollision *arg3 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg4 = (float *) (float *)0 ;
  NewtonCollision *arg5 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg6 = (float *) (float *)0 ;
  float *arg7 = (float *) (float *)0 ;
  float *arg8 = (float *) (float *)0 ;
  float *arg9 = (float *) (float *)0 ;
  long long *arg10 = (long long *) (long long *)0 ;
  long long *arg11 = (long long *) (long long *)0 ;
  int arg12 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NewtonCollision *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (NewtonCollision *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (float *)jarg9; 
  arg10 = (long long *)jarg10; 
  arg11 = (long long *)jarg11; 
  arg12 = (int)jarg12; 
  result = (int)NewtonCollisionCollide((NewtonWorld const *)arg1,arg2,(NewtonCollision const *)arg3,(float const *)arg4,(NewtonCollision const *)arg5,(float const *)arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionCollideContinue(void * jarg1, int jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15, void * jarg16, void * jarg17, int jarg18) {
  int jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  float arg3 ;
  NewtonCollision *arg4 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg5 = (float *) (float *)0 ;
  float *arg6 = (float *) (float *)0 ;
  float *arg7 = (float *) 0 ;
  NewtonCollision *arg8 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg9 = (float *) (float *)0 ;
  float *arg10 = (float *) (float *)0 ;
  float *arg11 = (float *) (float *)0 ;
  float *arg12 = (float *) (float *)0 ;
  float *arg13 = (float *) (float *)0 ;
  float *arg14 = (float *) (float *)0 ;
  float *arg15 = (float *) (float *)0 ;
  long long *arg16 = (long long *) (long long *)0 ;
  long long *arg17 = (long long *) (long long *)0 ;
  int arg18 ;
  int result;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (NewtonCollision *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (NewtonCollision *)jarg8; 
  arg9 = (float *)jarg9; 
  arg10 = (float *)jarg10; 
  arg11 = (float *)jarg11; 
  arg12 = (float *)jarg12; 
  arg13 = (float *)jarg13; 
  arg14 = (float *)jarg14; 
  arg15 = (float *)jarg15; 
  arg16 = (long long *)jarg16; 
  arg17 = (long long *)jarg17; 
  arg18 = (int)jarg18; 
  result = (int)NewtonCollisionCollideContinue((NewtonWorld const *)arg1,arg2,arg3,(NewtonCollision const *)arg4,(float const *)arg5,(float const *)arg6,(float const *)arg7,(NewtonCollision const *)arg8,(float const *)arg9,(float const *)arg10,(float const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionSupportVertex(void * jarg1, void * jarg2, void * jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonCollisionSupportVertex((NewtonCollision const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCollisionRayCast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  long long *arg5 = (long long *) (long long *)0 ;
  float result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (long long *)jarg5; 
  result = (float)NewtonCollisionRayCast((NewtonCollision const *)arg1,(float const *)arg2,(float const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionCalculateAABB(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonCollisionCalculateAABB((NewtonCollision const *)arg1,(float const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionForEachPolygonDo(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg2 = (float *) (float *)0 ;
  NewtonCollisionIterator arg3 = (NewtonCollisionIterator) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (NewtonCollisionIterator)jarg3; 
  arg4 = jarg4; 
  NewtonCollisionForEachPolygonDo((NewtonCollision const *)arg1,(float const *)arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCollisionAggregateCreate(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (void *)NewtonCollisionAggregateCreate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionAggregateDestroy(void * jarg1) {
  void *arg1 = (void *) (void *)0 ;
  
  arg1 = jarg1; 
  NewtonCollisionAggregateDestroy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionAggregateAddBody(void * jarg1, void * jarg2) {
  void *arg1 = (void *) (void *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  
  arg1 = jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  NewtonCollisionAggregateAddBody(arg1,(NewtonBody const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionAggregateRemoveBody(void * jarg1, void * jarg2) {
  void *arg1 = (void *) (void *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  
  arg1 = jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  NewtonCollisionAggregateRemoveBody(arg1,(NewtonBody const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonCollisionAggregateGetSelfCollision(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) (void *)0 ;
  int result;
  
  arg1 = jarg1; 
  result = (int)NewtonCollisionAggregateGetSelfCollision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCollisionAggregateSetSelfCollision(void * jarg1, int jarg2) {
  void *arg1 = (void *) (void *)0 ;
  int arg2 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  NewtonCollisionAggregateSetSelfCollision(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSetEulerAngle(void * jarg1, void * jarg2) {
  float *arg1 = (float *) (float *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonSetEulerAngle((float const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonGetEulerAngle(void * jarg1, void * jarg2, void * jarg3) {
  float *arg1 = (float *) (float *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonGetEulerAngle((float const *)arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCalculateSpringDamperAcceleration(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (float)NewtonCalculateSpringDamperAcceleration(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateDynamicBody(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (NewtonBody *)NewtonCreateDynamicBody((NewtonWorld const *)arg1,(NewtonCollision const *)arg2,(float const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateKinematicBody(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (NewtonBody *)NewtonCreateKinematicBody((NewtonWorld const *)arg1,(NewtonCollision const *)arg2,(float const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateDeformableBody(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (NewtonBody *)NewtonCreateDeformableBody((NewtonWorld const *)arg1,(NewtonCollision const *)arg2,(float const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDestroyBody(void * jarg1) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  NewtonDestroyBody((NewtonBody const *)arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetSimulationState(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetSimulationState((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetSimulationState(void * jarg1, int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonBodySetSimulationState((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetType(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetType((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetCollidable(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetCollidable((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetCollidable(void * jarg1, int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonBodySetCollidable((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyAddForce(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyAddForce((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyAddTorque(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyAddTorque((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyCalculateInverseDynamicsForce(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonBodyCalculateInverseDynamicsForce((NewtonBody const *)arg1,arg2,(float const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetCentreOfMass(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetCentreOfMass((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMassMatrix(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  NewtonBodySetMassMatrix((NewtonBody const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetFullMassMatrix(void * jarg1, float jarg2, void * jarg3) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonBodySetFullMassMatrix((NewtonBody const *)arg1,arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMassProperties(void * jarg1, float jarg2, void * jarg3) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  NewtonCollision *arg3 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (NewtonCollision *)jarg3; 
  NewtonBodySetMassProperties((NewtonBody const *)arg1,arg2,(NewtonCollision const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMatrix(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetMatrix((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMatrixNoSleep(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetMatrixNoSleep((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMatrixRecursive(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetMatrixRecursive((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMaterialGroupID(void * jarg1, int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonBodySetMaterialGroupID((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetContinuousCollisionMode(void * jarg1, unsigned int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  unsigned int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  NewtonBodySetContinuousCollisionMode((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetJointRecursiveCollision(void * jarg1, unsigned int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  unsigned int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  NewtonBodySetJointRecursiveCollision((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetOmega(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetOmega((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetOmegaNoSleep(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetOmegaNoSleep((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetVelocity(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetVelocity((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetVelocityNoSleep(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetVelocityNoSleep((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetForce(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetForce((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetTorque(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetTorque((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetLinearDamping(void * jarg1, float jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonBodySetLinearDamping((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetAngularDamping(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodySetAngularDamping((NewtonBody const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetCollision(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonCollision *arg2 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonCollision *)jarg2; 
  NewtonBodySetCollision((NewtonBody const *)arg1,(NewtonCollision const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetCollisionScale(void * jarg1, float jarg2, float jarg3, float jarg4) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  NewtonBodySetCollisionScale((NewtonBody const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonBodyGetMaxRotationPerStep(void * jarg1) {
  float jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (float)NewtonBodyGetMaxRotationPerStep((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetMaxRotationPerStep(void * jarg1, float jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonBodySetMaxRotationPerStep((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetSleepState(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetSleepState((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetSleepState(void * jarg1, int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonBodySetSleepState((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetAutoSleep(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetAutoSleep((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetAutoSleep(void * jarg1, int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonBodySetAutoSleep((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetFreezeState(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetFreezeState((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetFreezeState(void * jarg1, int jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonBodySetFreezeState((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetDestructorCallback(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBodyDestructor arg2 = (NewtonBodyDestructor) 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonBodyDestructor)jarg2; 
  NewtonBodySetDestructorCallback((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetDestructorCallback(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBodyDestructor result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonBodyDestructor)NewtonBodyGetDestructorCallback((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetTransformCallback(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonSetTransform arg2 = (NewtonSetTransform) 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonSetTransform)jarg2; 
  NewtonBodySetTransformCallback((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetTransformCallback(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonSetTransform result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonSetTransform)NewtonBodyGetTransformCallback((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetForceAndTorqueCallback(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonApplyForceAndTorque arg2 = (NewtonApplyForceAndTorque) 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonApplyForceAndTorque)jarg2; 
  NewtonBodySetForceAndTorqueCallback((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetForceAndTorqueCallback(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonApplyForceAndTorque result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonApplyForceAndTorque)NewtonBodyGetForceAndTorqueCallback((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetID(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetID((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodySetUserData(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = jarg2; 
  NewtonBodySetUserData((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetUserData(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (void *)NewtonBodyGetUserData((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetWorld(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonWorld *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonWorld *)NewtonBodyGetWorld((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetCollision(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonCollision *)NewtonBodyGetCollision((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetMaterialGroupID(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetMaterialGroupID((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetContinuousCollisionMode(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetContinuousCollisionMode((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonBodyGetJointRecursiveCollision(void * jarg1) {
  int jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (int)NewtonBodyGetJointRecursiveCollision((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetPosition(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetPosition((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetMatrix(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetMatrix((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetRotation(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetRotation((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetMassMatrix(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  float *arg5 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  NewtonBodyGetMassMatrix((NewtonBody const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetInvMass(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  float *arg5 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  NewtonBodyGetInvMass((NewtonBody const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetInertiaMatrix(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetInertiaMatrix((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetInvInertiaMatrix(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetInvInertiaMatrix((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetOmega(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetOmega((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetVelocity(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetVelocity((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetForce(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetForce((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetTorque(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetTorque((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetForceAcc(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetForceAcc((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetTorqueAcc(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetTorqueAcc((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetCentreOfMass(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetCentreOfMass((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetPointVelocity(void * jarg1, void * jarg2, void * jarg3) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonBodyGetPointVelocity((NewtonBody const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyAddImpulse(void * jarg1, void * jarg2, void * jarg3) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonBodyAddImpulse((NewtonBody const *)arg1,(float const *)arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyApplyImpulseArray(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) (float *)0 ;
  float *arg5 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  NewtonBodyApplyImpulseArray((NewtonBody const *)arg1,arg2,arg3,(float const *)arg4,(float const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyApplyImpulsePair(void * jarg1, void * jarg2, void * jarg3) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonBodyApplyImpulsePair((NewtonBody const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyIntegrateVelocity(void * jarg1, float jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float arg2 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonBodyIntegrateVelocity((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonBodyGetLinearDamping(void * jarg1) {
  float jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float result;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (float)NewtonBodyGetLinearDamping((NewtonBody const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetAngularDamping(void * jarg1, void * jarg2) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBodyGetAngularDamping((NewtonBody const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBodyGetAABB(void * jarg1, void * jarg2, void * jarg3) {
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonBodyGetAABB((NewtonBody const *)arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetFirstJoint(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonJoint *)NewtonBodyGetFirstJoint((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetNextJoint(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *arg2 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonJoint *)jarg2; 
  result = (NewtonJoint *)NewtonBodyGetNextJoint((NewtonBody const *)arg1,(NewtonJoint const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetFirstContactJoint(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonJoint *)NewtonBodyGetFirstContactJoint((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetNextContactJoint(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *arg2 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonJoint *)jarg2; 
  result = (NewtonJoint *)NewtonBodyGetNextContactJoint((NewtonBody const *)arg1,(NewtonJoint const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonBodyGetSkeleton(void * jarg1) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonSkeletonContainer *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  result = (NewtonSkeletonContainer *)NewtonBodyGetSkeleton((NewtonBody const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactJointGetFirstContact(void * jarg1) {
  void * jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (void *)NewtonContactJointGetFirstContact((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactJointGetNextContact(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonContactJointGetNextContact((NewtonJoint const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonContactJointGetContactCount(void * jarg1) {
  int jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (int)NewtonContactJointGetContactCount((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonContactJointRemoveContact(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = jarg2; 
  NewtonContactJointRemoveContact((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonContactJointGetClosestDistance(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonContactJointGetClosestDistance((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactGetMaterial(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  NewtonMaterial *result = 0 ;
  
  arg1 = jarg1; 
  result = (NewtonMaterial *)NewtonContactGetMaterial((void const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactGetCollision0(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = jarg1; 
  result = (NewtonCollision *)NewtonContactGetCollision0((void const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactGetCollision1(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = jarg1; 
  result = (NewtonCollision *)NewtonContactGetCollision1((void const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactGetCollisionID0(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = jarg1; 
  result = (void *)NewtonContactGetCollisionID0((void const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonContactGetCollisionID1(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = jarg1; 
  result = (void *)NewtonContactGetCollisionID1((void const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointGetUserData(void * jarg1) {
  void * jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (void *)NewtonJointGetUserData((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointSetUserData(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = jarg2; 
  NewtonJointSetUserData((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointGetBody0(void * jarg1) {
  void * jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (NewtonBody *)NewtonJointGetBody0((NewtonJoint const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonJointGetBody1(void * jarg1) {
  void * jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (NewtonBody *)NewtonJointGetBody1((NewtonJoint const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointGetInfo(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonJointRecord *arg2 = (NewtonJointRecord *) (NewtonJointRecord *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonJointRecord *)jarg2; 
  NewtonJointGetInfo((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonJointGetCollisionState(void * jarg1) {
  int jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (int)NewtonJointGetCollisionState((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointSetCollisionState(void * jarg1, int jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int arg2 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonJointSetCollisionState((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonJointGetStiffness(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonJointGetStiffness((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointSetStiffness(void * jarg1, float jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonJointSetStiffness((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDestroyJoint(void * jarg1, void * jarg2) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonJoint *arg2 = (NewtonJoint *) (NewtonJoint *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonJoint *)jarg2; 
  NewtonDestroyJoint((NewtonWorld const *)arg1,(NewtonJoint const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonJointSetDestructor(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonConstraintDestructor arg2 = (NewtonConstraintDestructor) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonConstraintDestructor)jarg2; 
  NewtonJointSetDestructor((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonJointIsActive(void * jarg1) {
  int jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (int)NewtonJointIsActive((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateClothPatch(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg3 ;
  NewtonClothPatchMaterial *arg4 = (NewtonClothPatchMaterial *) (NewtonClothPatchMaterial *)0 ;
  NewtonClothPatchMaterial *arg5 = (NewtonClothPatchMaterial *) (NewtonClothPatchMaterial *)0 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (NewtonClothPatchMaterial *)jarg4; 
  arg5 = (NewtonClothPatchMaterial *)jarg5; 
  result = (NewtonCollision *)NewtonCreateClothPatch((NewtonWorld const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonCreateDeformableMesh(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg3 ;
  NewtonCollision *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (int)jarg3; 
  result = (NewtonCollision *)NewtonCreateDeformableMesh((NewtonWorld const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshCreateClusters(void * jarg1, int jarg2, float jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  NewtonDeformableMeshCreateClusters(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshSetDebugCallback(void * jarg1, void * jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonCollisionIterator arg2 = (NewtonCollisionIterator) 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonCollisionIterator)jarg2; 
  NewtonDeformableMeshSetDebugCallback(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshGetParticleCount(void * jarg1) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (int)NewtonDeformableMeshGetParticleCount((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshGetParticlePosition(void * jarg1, int jarg2, void * jarg3) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonDeformableMeshGetParticlePosition(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshBeginConfiguration(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonDeformableMeshBeginConfiguration((NewtonCollision const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshUnconstraintParticle(void * jarg1, int jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonDeformableMeshUnconstraintParticle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshConstraintParticle(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  NewtonDeformableMeshConstraintParticle(arg1,arg2,(float const *)arg3,(NewtonBody const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshEndConfiguration(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonDeformableMeshEndConfiguration((NewtonCollision const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshSetSkinThickness(void * jarg1, float jarg2) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  float arg2 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonDeformableMeshSetSkinThickness(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshUpdateRenderNormals(void * jarg1) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  NewtonDeformableMeshUpdateRenderNormals((NewtonCollision const *)arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshGetVertexCount(void * jarg1) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (int)NewtonDeformableMeshGetVertexCount((NewtonCollision const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonDeformableMeshGetVertexStreams(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6, void * jarg7) {
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  float *arg5 = (float *) (float *)0 ;
  int arg6 ;
  float *arg7 = (float *) (float *)0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float *)jarg7; 
  NewtonDeformableMeshGetVertexStreams((NewtonCollision const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonDeformableMeshGetFirstSegment(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonDeformableMeshSegment *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (NewtonDeformableMeshSegment *)NewtonDeformableMeshGetFirstSegment((NewtonCollision const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonDeformableMeshGetNextSegment(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonDeformableMeshSegment *arg2 = (NewtonDeformableMeshSegment *) (NewtonDeformableMeshSegment *)0 ;
  NewtonDeformableMeshSegment *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonDeformableMeshSegment *)jarg2; 
  result = (NewtonDeformableMeshSegment *)NewtonDeformableMeshGetNextSegment((NewtonCollision const *)arg1,(NewtonDeformableMeshSegment const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshSegmentGetMaterialID(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonDeformableMeshSegment *arg2 = (NewtonDeformableMeshSegment *) (NewtonDeformableMeshSegment *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonDeformableMeshSegment *)jarg2; 
  result = (int)NewtonDeformableMeshSegmentGetMaterialID((NewtonCollision const *)arg1,(NewtonDeformableMeshSegment const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonDeformableMeshSegmentGetIndexCount(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonDeformableMeshSegment *arg2 = (NewtonDeformableMeshSegment *) (NewtonDeformableMeshSegment *)0 ;
  int result;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonDeformableMeshSegment *)jarg2; 
  result = (int)NewtonDeformableMeshSegmentGetIndexCount((NewtonCollision const *)arg1,(NewtonDeformableMeshSegment const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonDeformableMeshSegmentGetIndexList(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonDeformableMeshSegment *arg2 = (NewtonDeformableMeshSegment *) (NewtonDeformableMeshSegment *)0 ;
  int *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  arg2 = (NewtonDeformableMeshSegment *)jarg2; 
  result = (int *)NewtonDeformableMeshSegmentGetIndexList((NewtonCollision const *)arg1,(NewtonDeformableMeshSegment const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateBall(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) 0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  result = (NewtonJoint *)NewtonConstraintCreateBall((NewtonWorld const *)arg1,(float const *)arg2,(NewtonBody const *)arg3,(NewtonBody const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBallSetUserCallback(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonBallCallback arg2 = (NewtonBallCallback) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonBallCallback)jarg2; 
  NewtonBallSetUserCallback((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBallGetJointAngle(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBallGetJointAngle((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBallGetJointOmega(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBallGetJointOmega((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBallGetJointForce(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonBallGetJointForce((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonBallSetConeLimits(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  NewtonBallSetConeLimits((NewtonJoint const *)arg1,(float const *)arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateHinge(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg5 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  arg5 = (NewtonBody *)jarg5; 
  result = (NewtonJoint *)NewtonConstraintCreateHinge((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,(NewtonBody const *)arg4,(NewtonBody const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHingeSetUserCallback(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeCallback arg2 = (NewtonHingeCallback) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeCallback)jarg2; 
  NewtonHingeSetUserCallback((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeGetJointAngle(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonHingeGetJointAngle((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeGetJointOmega(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonHingeGetJointOmega((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonHingeGetJointForce(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonHingeGetJointForce((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonHingeCalculateStopAlpha(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeSliderUpdateDesc *arg2 = (NewtonHingeSliderUpdateDesc *) (NewtonHingeSliderUpdateDesc *)0 ;
  float arg3 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeSliderUpdateDesc *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)NewtonHingeCalculateStopAlpha((NewtonJoint const *)arg1,(NewtonHingeSliderUpdateDesc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateSlider(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg5 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  arg5 = (NewtonBody *)jarg5; 
  result = (NewtonJoint *)NewtonConstraintCreateSlider((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,(NewtonBody const *)arg4,(NewtonBody const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSliderSetUserCallback(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonSliderCallback arg2 = (NewtonSliderCallback) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonSliderCallback)jarg2; 
  NewtonSliderSetUserCallback((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonSliderGetJointPosit(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) 0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonSliderGetJointPosit((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonSliderGetJointVeloc(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) 0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonSliderGetJointVeloc((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSliderGetJointForce(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonSliderGetJointForce((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonSliderCalculateStopAccel(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeSliderUpdateDesc *arg2 = (NewtonHingeSliderUpdateDesc *) (NewtonHingeSliderUpdateDesc *)0 ;
  float arg3 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeSliderUpdateDesc *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)NewtonSliderCalculateStopAccel((NewtonJoint const *)arg1,(NewtonHingeSliderUpdateDesc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateCorkscrew(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg5 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  arg5 = (NewtonBody *)jarg5; 
  result = (NewtonJoint *)NewtonConstraintCreateCorkscrew((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,(NewtonBody const *)arg4,(NewtonBody const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCorkscrewSetUserCallback(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonCorkscrewCallback arg2 = (NewtonCorkscrewCallback) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonCorkscrewCallback)jarg2; 
  NewtonCorkscrewSetUserCallback((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCorkscrewGetJointPosit(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonCorkscrewGetJointPosit((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCorkscrewGetJointAngle(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonCorkscrewGetJointAngle((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCorkscrewGetJointVeloc(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonCorkscrewGetJointVeloc((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCorkscrewGetJointOmega(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonCorkscrewGetJointOmega((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonCorkscrewGetJointForce(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonCorkscrewGetJointForce((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCorkscrewCalculateStopAlpha(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeSliderUpdateDesc *arg2 = (NewtonHingeSliderUpdateDesc *) (NewtonHingeSliderUpdateDesc *)0 ;
  float arg3 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeSliderUpdateDesc *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)NewtonCorkscrewCalculateStopAlpha((NewtonJoint const *)arg1,(NewtonHingeSliderUpdateDesc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonCorkscrewCalculateStopAccel(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeSliderUpdateDesc *arg2 = (NewtonHingeSliderUpdateDesc *) (NewtonHingeSliderUpdateDesc *)0 ;
  float arg3 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeSliderUpdateDesc *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)NewtonCorkscrewCalculateStopAccel((NewtonJoint const *)arg1,(NewtonHingeSliderUpdateDesc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateUniversal(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  NewtonBody *arg5 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg6 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (NewtonBody *)jarg5; 
  arg6 = (NewtonBody *)jarg6; 
  result = (NewtonJoint *)NewtonConstraintCreateUniversal((NewtonWorld const *)arg1,(float const *)arg2,(float const *)arg3,(float const *)arg4,(NewtonBody const *)arg5,(NewtonBody const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUniversalSetUserCallback(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonUniversalCallback arg2 = (NewtonUniversalCallback) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonUniversalCallback)jarg2; 
  NewtonUniversalSetUserCallback((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUniversalGetJointAngle0(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonUniversalGetJointAngle0((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUniversalGetJointAngle1(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonUniversalGetJointAngle1((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUniversalGetJointOmega0(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonUniversalGetJointOmega0((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUniversalGetJointOmega1(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonUniversalGetJointOmega1((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUniversalGetJointForce(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonUniversalGetJointForce((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUniversalCalculateStopAlpha0(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeSliderUpdateDesc *arg2 = (NewtonHingeSliderUpdateDesc *) (NewtonHingeSliderUpdateDesc *)0 ;
  float arg3 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeSliderUpdateDesc *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)NewtonUniversalCalculateStopAlpha0((NewtonJoint const *)arg1,(NewtonHingeSliderUpdateDesc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUniversalCalculateStopAlpha1(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonHingeSliderUpdateDesc *arg2 = (NewtonHingeSliderUpdateDesc *) (NewtonHingeSliderUpdateDesc *)0 ;
  float arg3 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonHingeSliderUpdateDesc *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)NewtonUniversalCalculateStopAlpha1((NewtonJoint const *)arg1,(NewtonHingeSliderUpdateDesc const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateUpVector(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  float *arg2 = (float *) 0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  result = (NewtonJoint *)NewtonConstraintCreateUpVector((NewtonWorld const *)arg1,(float const *)arg2,(NewtonBody const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUpVectorGetPin(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonUpVectorGetPin((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUpVectorSetPin(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonUpVectorSetPin((NewtonJoint const *)arg1,(float const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonConstraintCreateUserJoint(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  NewtonUserBilateralCallback arg3 = (NewtonUserBilateralCallback) 0 ;
  NewtonUserBilateralGetInfoCallback arg4 = (NewtonUserBilateralGetInfoCallback) 0 ;
  NewtonBody *arg5 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg6 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NewtonUserBilateralCallback)jarg3; 
  arg4 = (NewtonUserBilateralGetInfoCallback)jarg4; 
  arg5 = (NewtonBody *)jarg5; 
  arg6 = (NewtonBody *)jarg6; 
  result = (NewtonJoint *)NewtonConstraintCreateUserJoint((NewtonWorld const *)arg1,arg2,arg3,arg4,(NewtonBody const *)arg5,(NewtonBody const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointSetFeedbackCollectorCallback(void * jarg1, void * jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  NewtonUserBilateralCallback arg2 = (NewtonUserBilateralCallback) 0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (NewtonUserBilateralCallback)jarg2; 
  NewtonUserJointSetFeedbackCollectorCallback((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointAddLinearRow(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonUserJointAddLinearRow((NewtonJoint const *)arg1,(float const *)arg2,(float const *)arg3,(float const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointAddAngularRow(void * jarg1, float jarg2, void * jarg3) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonUserJointAddAngularRow((NewtonJoint const *)arg1,arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointAddGeneralRow(void * jarg1, void * jarg2, void * jarg3) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  NewtonUserJointAddGeneralRow((NewtonJoint const *)arg1,(float const *)arg2,(float const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointSetRowMinimumFriction(void * jarg1, float jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonUserJointSetRowMinimumFriction((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointSetRowMaximumFriction(void * jarg1, float jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonUserJointSetRowMaximumFriction((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUserCalculateRowZeroAccelaration(void * jarg1) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (float)NewtonUserCalculateRowZeroAccelaration((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointSetRowAcceleration(void * jarg1, float jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonUserJointSetRowAcceleration((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointSetRowSpringDamperAcceleration(void * jarg1, float jarg2, float jarg3) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  NewtonUserJointSetRowSpringDamperAcceleration((NewtonJoint const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointSetRowStiffness(void * jarg1, float jarg2) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  float arg2 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonUserJointSetRowStiffness((NewtonJoint const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonUserJoinRowsCount(void * jarg1) {
  int jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int result;
  
  arg1 = (NewtonJoint *)jarg1; 
  result = (int)NewtonUserJoinRowsCount((NewtonJoint const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonUserJointGetGeneralRow(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  NewtonUserJointGetGeneralRow((NewtonJoint const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NewtonUserJointGetRowForce(void * jarg1, int jarg2) {
  float jresult ;
  NewtonJoint *arg1 = (NewtonJoint *) (NewtonJoint *)0 ;
  int arg2 ;
  float result;
  
  arg1 = (NewtonJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)NewtonUserJointGetRowForce((NewtonJoint const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerCreate(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonSkeletontDestructor arg3 = (NewtonSkeletontDestructor) 0 ;
  NewtonSkeletonContainer *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonSkeletontDestructor)jarg3; 
  result = (NewtonSkeletonContainer *)NewtonSkeletonContainerCreate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonContainerDelete(void * jarg1) {
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  NewtonSkeletonContainerDelete(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonSkeletonGetSolverMode(void * jarg1) {
  int jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  int result;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  result = (int)NewtonSkeletonGetSolverMode((NewtonSkeletonContainer const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonSetSolverMode(void * jarg1, int jarg2) {
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  int arg2 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonSkeletonSetSolverMode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonContainerAttachJointArray(void * jarg1, int jarg2, void * jarg3) {
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  int arg2 ;
  NewtonJoint **arg3 = (NewtonJoint **) (NewtonJoint **)0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NewtonJoint **)jarg3; 
  NewtonSkeletonContainerAttachJointArray(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerAttachBone(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  result = (void *)NewtonSkeletonContainerAttachBone(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonSkeletonContainerFinalize(void * jarg1) {
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  NewtonSkeletonContainerFinalize(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerGetRoot(void * jarg1) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  result = (void *)NewtonSkeletonContainerGetRoot((NewtonSkeletonContainer const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerGetParent(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonSkeletonContainerGetParent((NewtonSkeletonContainer const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerFirstChild(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonSkeletonContainerFirstChild((NewtonSkeletonContainer const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerNextSibling(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonSkeletonContainerNextSibling((NewtonSkeletonContainer const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerGetBodyFromNode(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  void *arg2 = (void *) (void *)0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = jarg2; 
  result = (NewtonBody *)NewtonSkeletonContainerGetBodyFromNode((NewtonSkeletonContainer const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonSkeletonContainerGetParentJointFromNode(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonSkeletonContainer *arg1 = (NewtonSkeletonContainer *) (NewtonSkeletonContainer *)0 ;
  void *arg2 = (void *) (void *)0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (NewtonSkeletonContainer *)jarg1; 
  arg2 = jarg2; 
  result = (NewtonJoint *)NewtonSkeletonContainerGetParentJointFromNode((NewtonSkeletonContainer const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreate(void * jarg1) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  result = (NewtonMesh *)NewtonMeshCreate((NewtonWorld const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateFromMesh(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (NewtonMesh *)NewtonMeshCreateFromMesh((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateFromCollision(void * jarg1) {
  void * jresult ;
  NewtonCollision *arg1 = (NewtonCollision *) (NewtonCollision *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonCollision *)jarg1; 
  result = (NewtonMesh *)NewtonMeshCreateFromCollision((NewtonCollision const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateConvexHull(void * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  float arg5 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  result = (NewtonMesh *)NewtonMeshCreateConvexHull((NewtonWorld const *)arg1,arg2,(float const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateDelaunayTetrahedralization(void * jarg1, int jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) (float *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (NewtonMesh *)NewtonMeshCreateDelaunayTetrahedralization((NewtonWorld const *)arg1,arg2,(float const *)arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateVoronoiConvexDecomposition(void * jarg1, int jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) (float *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (NewtonMesh *)NewtonMeshCreateVoronoiConvexDecomposition((NewtonWorld const *)arg1,arg2,(float const *)arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateFromSerialization(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  NewtonDeserializeCallback arg2 = (NewtonDeserializeCallback) 0 ;
  void *arg3 = (void *) (void *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (NewtonDeserializeCallback)jarg2; 
  arg3 = jarg3; 
  result = (NewtonMesh *)NewtonMeshCreateFromSerialization((NewtonWorld const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshDestroy(void * jarg1) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  NewtonMeshDestroy((NewtonMesh const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshSerialize(void * jarg1, void * jarg2, void * jarg3) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonSerializeCallback arg2 = (NewtonSerializeCallback) 0 ;
  void *arg3 = (void *) (void *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonSerializeCallback)jarg2; 
  arg3 = jarg3; 
  NewtonMeshSerialize((NewtonMesh const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshSaveOFF(void * jarg1, char * jarg2) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (char *)jarg2; 
  NewtonMeshSaveOFF((NewtonMesh const *)arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshLoadOFF(void * jarg1, char * jarg2) {
  void * jresult ;
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  char *arg2 = (char *) (char *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (NewtonMesh *)NewtonMeshLoadOFF((NewtonWorld const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshApplyTransform(void * jarg1, void * jarg2) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (float *)jarg2; 
  NewtonMeshApplyTransform((NewtonMesh const *)arg1,(float const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshCalculateOOBB(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  float *arg2 = (float *) (float *)0 ;
  float *arg3 = (float *) (float *)0 ;
  float *arg4 = (float *) (float *)0 ;
  float *arg5 = (float *) (float *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  NewtonMeshCalculateOOBB((NewtonMesh const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshCalculateVertexNormals(void * jarg1, float jarg2) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  float arg2 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (float)jarg2; 
  NewtonMeshCalculateVertexNormals((NewtonMesh const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshApplySphericalMapping(void * jarg1, int jarg2) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  NewtonMeshApplySphericalMapping((NewtonMesh const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshApplyCylindricalMapping(void * jarg1, int jarg2, int jarg3) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  NewtonMeshApplyCylindricalMapping((NewtonMesh const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshApplyBoxMapping(void * jarg1, int jarg2, int jarg3, int jarg4) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  NewtonMeshApplyBoxMapping((NewtonMesh const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshApplyAngleBasedMapping(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  NewtonReportProgress arg3 = (NewtonReportProgress) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NewtonReportProgress)jarg3; 
  arg4 = jarg4; 
  NewtonMeshApplyAngleBasedMapping((NewtonMesh const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshIsOpenMesh(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshIsOpenMesh((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshFixTJoints(void * jarg1) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  NewtonMeshFixTJoints((NewtonMesh const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshPolygonize(void * jarg1) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  NewtonMeshPolygonize((NewtonMesh const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshTriangulate(void * jarg1) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  NewtonMeshTriangulate((NewtonMesh const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshUnion(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (NewtonMesh *)NewtonMeshUnion((NewtonMesh const *)arg1,(NewtonMesh const *)arg2,(float const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshDifference(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (NewtonMesh *)NewtonMeshDifference((NewtonMesh const *)arg1,(NewtonMesh const *)arg2,(float const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshIntersection(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (NewtonMesh *)NewtonMeshIntersection((NewtonMesh const *)arg1,(NewtonMesh const *)arg2,(float const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshClip(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  float *arg3 = (float *) (float *)0 ;
  NewtonMesh **arg4 = (NewtonMesh **) (NewtonMesh **)0 ;
  NewtonMesh **arg5 = (NewtonMesh **) (NewtonMesh **)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (NewtonMesh **)jarg4; 
  arg5 = (NewtonMesh **)jarg5; 
  NewtonMeshClip((NewtonMesh const *)arg1,(NewtonMesh const *)arg2,(float const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshConvexMeshIntersection(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  result = (NewtonMesh *)NewtonMeshConvexMeshIntersection((NewtonMesh const *)arg1,(NewtonMesh const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshSimplify(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  NewtonReportProgress arg3 = (NewtonReportProgress) 0 ;
  void *arg4 = (void *) (void *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NewtonReportProgress)jarg3; 
  arg4 = jarg4; 
  result = (NewtonMesh *)NewtonMeshSimplify((NewtonMesh const *)arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshApproximateConvexDecomposition(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  NewtonReportProgress arg6 = (NewtonReportProgress) 0 ;
  void *arg7 = (void *) (void *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (NewtonReportProgress)jarg6; 
  arg7 = jarg7; 
  result = (NewtonMesh *)NewtonMeshApproximateConvexDecomposition((NewtonMesh const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonRemoveUnusedVertices(void * jarg1, void * jarg2) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int *)jarg2; 
  NewtonRemoveUnusedVertices((NewtonMesh const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshBeginFace(void * jarg1) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  NewtonMeshBeginFace((NewtonMesh const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshAddFace(void * jarg1, int jarg2, void * jarg3, int jarg4, int jarg5) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  NewtonMeshAddFace((NewtonMesh const *)arg1,arg2,(float const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshEndFace(void * jarg1) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  NewtonMeshEndFace((NewtonMesh const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshBuildFromVertexListIndexList(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7, void * jarg8, int jarg9, void * jarg10, void * jarg11, int jarg12, void * jarg13, void * jarg14, int jarg15, void * jarg16) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  int *arg3 = (int *) (int *)0 ;
  int *arg4 = (int *) (int *)0 ;
  float *arg5 = (float *) (float *)0 ;
  int arg6 ;
  int *arg7 = (int *) (int *)0 ;
  float *arg8 = (float *) (float *)0 ;
  int arg9 ;
  int *arg10 = (int *) (int *)0 ;
  float *arg11 = (float *) (float *)0 ;
  int arg12 ;
  int *arg13 = (int *) (int *)0 ;
  float *arg14 = (float *) (float *)0 ;
  int arg15 ;
  int *arg16 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int *)jarg10; 
  arg11 = (float *)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int *)jarg13; 
  arg14 = (float *)jarg14; 
  arg15 = (int)jarg15; 
  arg16 = (int *)jarg16; 
  NewtonMeshBuildFromVertexListIndexList((NewtonMesh const *)arg1,arg2,(int const *)arg3,(int const *)arg4,(float const *)arg5,arg6,(int const *)arg7,(float const *)arg8,arg9,(int const *)arg10,(float const *)arg11,arg12,(int const *)arg13,(float const *)arg14,arg15,(int const *)arg16);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshGetVertexStreams(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6, void * jarg7, int jarg8, void * jarg9) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int arg4 ;
  float *arg5 = (float *) (float *)0 ;
  int arg6 ;
  float *arg7 = (float *) (float *)0 ;
  int arg8 ;
  float *arg9 = (float *) (float *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float *)jarg9; 
  NewtonMeshGetVertexStreams((NewtonMesh const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshGetIndirectVertexStreams(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10, void * jarg11, void * jarg12, void * jarg13, int jarg14, void * jarg15, void * jarg16, void * jarg17) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int arg2 ;
  float *arg3 = (float *) (float *)0 ;
  int *arg4 = (int *) (int *)0 ;
  int *arg5 = (int *) (int *)0 ;
  int arg6 ;
  float *arg7 = (float *) (float *)0 ;
  int *arg8 = (int *) (int *)0 ;
  int *arg9 = (int *) (int *)0 ;
  int arg10 ;
  float *arg11 = (float *) (float *)0 ;
  int *arg12 = (int *) (int *)0 ;
  int *arg13 = (int *) (int *)0 ;
  int arg14 ;
  float *arg15 = (float *) (float *)0 ;
  int *arg16 = (int *) (int *)0 ;
  int *arg17 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (float *)jarg11; 
  arg12 = (int *)jarg12; 
  arg13 = (int *)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (float *)jarg15; 
  arg16 = (int *)jarg16; 
  arg17 = (int *)jarg17; 
  NewtonMeshGetIndirectVertexStreams((NewtonMesh const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshBeginHandle(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (void *)NewtonMeshBeginHandle((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshEndHandle(void * jarg1, void * jarg2) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  NewtonMeshEndHandle((NewtonMesh const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshFirstMaterial(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshFirstMaterial((NewtonMesh const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshNextMaterial(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int arg3 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  result = (int)NewtonMeshNextMaterial((NewtonMesh const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshMaterialGetMaterial(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int arg3 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  result = (int)NewtonMeshMaterialGetMaterial((NewtonMesh const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshMaterialGetIndexCount(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int arg3 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  result = (int)NewtonMeshMaterialGetIndexCount((NewtonMesh const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshMaterialGetIndexStream(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int arg3 ;
  int *arg4 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4; 
  NewtonMeshMaterialGetIndexStream((NewtonMesh const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshMaterialGetIndexStreamShort(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int arg3 ;
  short *arg4 = (short *) (short *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (short *)jarg4; 
  NewtonMeshMaterialGetIndexStreamShort((NewtonMesh const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateFirstSingleSegment(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (NewtonMesh *)NewtonMeshCreateFirstSingleSegment((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateNextSingleSegment(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  result = (NewtonMesh *)NewtonMeshCreateNextSingleSegment((NewtonMesh const *)arg1,(NewtonMesh const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateFirstLayer(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (NewtonMesh *)NewtonMeshCreateFirstLayer((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshCreateNextLayer(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *arg2 = (NewtonMesh *) (NewtonMesh *)0 ;
  NewtonMesh *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (NewtonMesh *)jarg2; 
  result = (NewtonMesh *)NewtonMeshCreateNextLayer((NewtonMesh const *)arg1,(NewtonMesh const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetTotalFaceCount(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshGetTotalFaceCount((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetTotalIndexCount(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshGetTotalIndexCount((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshGetFaces(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int *arg2 = (int *) (int *)0 ;
  int *arg3 = (int *) (int *)0 ;
  void **arg4 = (void **) (void **)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (void **)jarg4; 
  NewtonMeshGetFaces((NewtonMesh const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetPointCount(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshGetPointCount((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetPointStrideInByte(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshGetPointStrideInByte((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetPointArray(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  double *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (double *)NewtonMeshGetPointArray((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetNormalArray(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  double *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (double *)NewtonMeshGetNormalArray((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetUV0Array(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  double *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (double *)NewtonMeshGetUV0Array((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetUV1Array(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  double *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (double *)NewtonMeshGetUV1Array((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetVertexCount(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshGetVertexCount((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetVertexStrideInByte(void * jarg1) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (int)NewtonMeshGetVertexStrideInByte((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetVertexArray(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  double *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (double *)NewtonMeshGetVertexArray((NewtonMesh const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetFirstVertex(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (void *)NewtonMeshGetFirstVertex((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetNextVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonMeshGetNextVertex((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetVertexIndex(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshGetVertexIndex((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetFirstPoint(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (void *)NewtonMeshGetFirstPoint((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetNextPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonMeshGetNextPoint((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetPointIndex(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshGetPointIndex((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetVertexIndexFromPoint(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshGetVertexIndexFromPoint((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetFirstEdge(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (void *)NewtonMeshGetFirstEdge((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetNextEdge(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonMeshGetNextEdge((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshGetEdgeIndices(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int *arg3 = (int *) (int *)0 ;
  int *arg4 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  NewtonMeshGetEdgeIndices((NewtonMesh const *)arg1,(void const *)arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetFirstFace(void * jarg1) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  result = (void *)NewtonMeshGetFirstFace((NewtonMesh const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewtonMeshGetNextFace(void * jarg1, void * jarg2) {
  void * jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  void *result = 0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (void *)NewtonMeshGetNextFace((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshIsFaceOpen(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshIsFaceOpen((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetFaceMaterial(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshGetFaceMaterial((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NewtonMeshGetFaceIndexCount(void * jarg1, void * jarg2) {
  int jresult ;
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int result;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  result = (int)NewtonMeshGetFaceIndexCount((NewtonMesh const *)arg1,(void const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshGetFaceIndices(void * jarg1, void * jarg2, void * jarg3) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int *arg3 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int *)jarg3; 
  NewtonMeshGetFaceIndices((NewtonMesh const *)arg1,(void const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshGetFacePointIndices(void * jarg1, void * jarg2, void * jarg3) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int *arg3 = (int *) (int *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int *)jarg3; 
  NewtonMeshGetFacePointIndices((NewtonMesh const *)arg1,(void const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshCalculateFaceNormal(void * jarg1, void * jarg2, void * jarg3) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  double *arg3 = (double *) (double *)0 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (double *)jarg3; 
  NewtonMeshCalculateFaceNormal((NewtonMesh const *)arg1,(void const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewtonMeshSetFaceMaterial(void * jarg1, void * jarg2, int jarg3) {
  NewtonMesh *arg1 = (NewtonMesh *) (NewtonMesh *)0 ;
  void *arg2 = (void *) (void *)0 ;
  int arg3 ;
  
  arg1 = (NewtonMesh *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  NewtonMeshSetFaceMaterial((NewtonMesh const *)arg1,(void const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dVector__SWIG_0() {
  void * jresult ;
  dVector *result = 0 ;
  
  result = (dVector *)new dVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dVector__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  dVector *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (dVector *)new dVector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dVector__SWIG_2(void * jarg1) {
  void * jresult ;
  TemplateVector< float > *arg1 = 0 ;
  dVector *result = 0 ;
  
  arg1 = (TemplateVector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TemplateVector< float > const & type is null", 0);
    return 0;
  } 
  result = (dVector *)new dVector((TemplateVector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dVector__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) (float *)0 ;
  dVector *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (dVector *)new dVector((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dVector__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  dVector *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (dVector *)new dVector(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dVector__SWIG_5(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  dVector *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (dVector *)new dVector(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dVector(void * jarg1) {
  dVector *arg1 = (dVector *) 0 ;
  
  arg1 = (dVector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_0() {
  void * jresult ;
  dBigVector *result = 0 ;
  
  result = (dBigVector *)new dBigVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  dBigVector *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (dBigVector *)new dBigVector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_2(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) (double *)0 ;
  dBigVector *result = 0 ;
  
  arg1 = (double *)jarg1; 
  result = (dBigVector *)new dBigVector((double const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_3(void * jarg1) {
  void * jresult ;
  TemplateVector< double > *arg1 = 0 ;
  dBigVector *result = 0 ;
  
  arg1 = (TemplateVector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TemplateVector< double > const & type is null", 0);
    return 0;
  } 
  result = (dBigVector *)new dBigVector((TemplateVector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_4(void * jarg1) {
  void * jresult ;
  dVector *arg1 = 0 ;
  dBigVector *result = 0 ;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = (dBigVector *)new dBigVector((dVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_5(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  dBigVector *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (dBigVector *)new dBigVector(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBigVector__SWIG_6(double jarg1, double jarg2, double jarg3) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  dBigVector *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (dBigVector *)new dBigVector(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dBigVector(void * jarg1) {
  dBigVector *arg1 = (dBigVector *) 0 ;
  
  arg1 = (dBigVector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dGetZeroMatrix() {
  void * jresult ;
  dMatrix result;
  
  result = dGetZeroMatrix();
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dGetIdentityMatrix() {
  void * jresult ;
  dMatrix result;
  
  result = dGetIdentityMatrix();
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_0() {
  void * jresult ;
  dMatrix *result = 0 ;
  
  result = (dMatrix *)new dMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_1(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) (float *)0 ;
  dMatrix *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (dMatrix *)new dMatrix((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_2(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) (double *)0 ;
  dMatrix *result = 0 ;
  
  arg1 = (double *)jarg1; 
  result = (dMatrix *)new dMatrix((double const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  dVector *arg1 = 0 ;
  dVector *arg2 = 0 ;
  dVector *arg3 = 0 ;
  dVector *arg4 = 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg4 = (dVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = (dMatrix *)new dMatrix((dVector const &)*arg1,(dVector const &)*arg2,(dVector const &)*arg3,(dVector const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  dQuaternion *arg1 = 0 ;
  dVector *arg2 = 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (dQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = (dMatrix *)new dMatrix((dQuaternion const &)*arg1,(dVector const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_5(float jarg1, float jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  dVector *arg4 = 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (dVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = (dMatrix *)new dMatrix(arg1,arg2,arg3,(dVector const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix___dMatrix_GetElement__(void * jarg1, int jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  int arg2 ;
  dVector *result = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (int)jarg2; 
  result = (dVector *) &(arg1)->operator [](arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix___dMatrix_GetElement__Const__(void * jarg1, int jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  int arg2 ;
  dVector *result = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (int)jarg2; 
  result = (dVector *) &((dMatrix const *)arg1)->operator [](arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_Inverse(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  result = ((dMatrix const *)arg1)->Inverse();
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_Transpose(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  result = ((dMatrix const *)arg1)->Transpose();
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_Transpose4X4(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  result = ((dMatrix const *)arg1)->Transpose4X4();
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_RotateVector(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->RotateVector((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_UnrotateVector(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->UnrotateVector((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_TransformVector(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->TransformVector((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_UntransformVector(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->UntransformVector((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_TransformPlane(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->TransformPlane((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_UntransformPlane(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->UntransformPlane((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_GetEulerAngles__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector *arg3 = 0 ;
  dEulerAngleOrder arg4 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg4 = (dEulerAngleOrder)jarg4; 
  ((dMatrix const *)arg1)->GetEulerAngles(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_GetEulerAngles__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector *arg3 = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  ((dMatrix const *)arg1)->GetEulerAngles(*arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_dMatrix_TestIdentity(void * jarg1) {
  unsigned int jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  bool result;
  
  arg1 = (dMatrix *)jarg1; 
  result = (bool)((dMatrix const *)arg1)->TestIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_dMatrix_TestOrthogonal(void * jarg1) {
  unsigned int jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  bool result;
  
  arg1 = (dMatrix *)jarg1; 
  result = (bool)((dMatrix const *)arg1)->TestOrthogonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_Inverse4x4(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  result = ((dMatrix const *)arg1)->Inverse4x4();
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_RotateVector4x4(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->RotateVector4x4((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_JacobiDiagonalization__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dMatrix *arg3 = 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return 0;
  } 
  arg3 = (dMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->JacobiDiagonalization(*arg2,(dMatrix const &)*arg3);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_JacobiDiagonalization__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->JacobiDiagonalization(*arg2);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_PolarDecomposition__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix *arg2 = 0 ;
  dVector *arg3 = 0 ;
  dMatrix *arg4 = 0 ;
  dMatrix *arg5 = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix & type is null", 0);
    return ;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg4 = (dMatrix *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix & type is null", 0);
    return ;
  } 
  arg5 = (dMatrix *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return ;
  } 
  ((dMatrix const *)arg1)->PolarDecomposition(*arg2,*arg3,*arg4,(dMatrix const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_PolarDecomposition__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix *arg2 = 0 ;
  dVector *arg3 = 0 ;
  dMatrix *arg4 = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix & type is null", 0);
    return ;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg4 = (dMatrix *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix & type is null", 0);
    return ;
  } 
  ((dMatrix const *)arg1)->PolarDecomposition(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dMatrix__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  dVector *arg2 = 0 ;
  dMatrix *arg3 = 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg3 = (dMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  result = (dMatrix *)new dMatrix((dMatrix const &)*arg1,(dVector const &)*arg2,(dMatrix const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_TransformTriplex__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  int arg3 ;
  float *arg4 = (float *) (float *)0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ((dMatrix const *)arg1)->TransformTriplex(arg2,arg3,(float const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_TransformTriplex__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  int arg3 ;
  double *arg4 = (double *) (double *)0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ((dMatrix const *)arg1)->TransformTriplex(arg2,arg3,(double const *)arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix___dMatrix_multiply__(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dMatrix *arg2 = 0 ;
  dMatrix result;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  result = ((dMatrix const *)arg1)->operator *((dMatrix const &)*arg2);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_dMatrix_SanityCheck(void * jarg1) {
  unsigned int jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  bool result;
  
  arg1 = (dMatrix *)jarg1; 
  result = (bool)((dMatrix const *)arg1)->SanityCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_m_front_set(void * jarg1, void * jarg2) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_front = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_m_front_get(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  result = (dVector *)& ((arg1)->m_front);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_m_up_set(void * jarg1, void * jarg2) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_up = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_m_up_get(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  result = (dVector *)& ((arg1)->m_up);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_m_right_set(void * jarg1, void * jarg2) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_right = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_m_right_get(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  result = (dVector *)& ((arg1)->m_right);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dMatrix_m_posit_set(void * jarg1, void * jarg2) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_posit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dMatrix_m_posit_get(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = (dMatrix *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  result = (dVector *)& ((arg1)->m_posit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dMatrix(void * jarg1) {
  dMatrix *arg1 = (dMatrix *) 0 ;
  
  arg1 = (dMatrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dRollMatrix(float jarg1) {
  void * jresult ;
  float arg1 ;
  dMatrix result;
  
  arg1 = (float)jarg1; 
  result = dRollMatrix(arg1);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dYawMatrix(float jarg1) {
  void * jresult ;
  float arg1 ;
  dMatrix result;
  
  arg1 = (float)jarg1; 
  result = dYawMatrix(arg1);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dPitchMatrix(float jarg1) {
  void * jresult ;
  float arg1 ;
  dMatrix result;
  
  arg1 = (float)jarg1; 
  result = dPitchMatrix(arg1);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dGrammSchmidt(void * jarg1) {
  void * jresult ;
  dVector *arg1 = 0 ;
  dMatrix result;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = dGrammSchmidt((dVector const &)*arg1);
  jresult = new dMatrix((const dMatrix &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dQuaternion__SWIG_0() {
  void * jresult ;
  dQuaternion *result = 0 ;
  
  result = (dQuaternion *)new dQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dQuaternion__SWIG_1(void * jarg1) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  dQuaternion *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  result = (dQuaternion *)new dQuaternion((dMatrix const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dQuaternion__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  dQuaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (dQuaternion *)new dQuaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dQuaternion__SWIG_3(void * jarg1, float jarg2) {
  void * jresult ;
  dVector *arg1 = 0 ;
  float arg2 ;
  dQuaternion *result = 0 ;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (dQuaternion *)new dQuaternion((dVector const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dQuaternion__SWIG_4(void * jarg1) {
  void * jresult ;
  dVector *arg1 = 0 ;
  dQuaternion *result = 0 ;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = (dQuaternion *)new dQuaternion((dVector const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_Scale(void * jarg1, float jarg2) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Scale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_Normalize(void * jarg1) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  
  arg1 = (dQuaternion *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT float SWIGSTDCALL CSharp_dQuaternion_DotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion *arg2 = 0 ;
  float result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  result = (float)((dQuaternion const *)arg1)->DotProduct((dQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion_Inverse(void * jarg1) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion result;
  
  arg1 = (dQuaternion *)jarg1; 
  result = ((dQuaternion const *)arg1)->Inverse();
  jresult = new dQuaternion((const dQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion_RotateVector(void * jarg1, void * jarg2) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dQuaternion const *)arg1)->RotateVector((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion_UnrotateVector(void * jarg1, void * jarg2) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dVector *arg2 = 0 ;
  dVector result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  result = ((dQuaternion const *)arg1)->UnrotateVector((dVector const &)*arg2);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_GetEulerAngles__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dVector *arg2 = 0 ;
  dVector *arg3 = 0 ;
  dEulerAngleOrder arg4 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg4 = (dEulerAngleOrder)jarg4; 
  ((dQuaternion const *)arg1)->GetEulerAngles(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_GetEulerAngles__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dVector *arg2 = 0 ;
  dVector *arg3 = 0 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  arg3 = (dVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector & type is null", 0);
    return ;
  } 
  ((dQuaternion const *)arg1)->GetEulerAngles(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion_CalcAverageOmega(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion *arg2 = 0 ;
  float arg3 ;
  dVector result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((dQuaternion const *)arg1)->CalcAverageOmega((dQuaternion const &)*arg2,arg3);
  jresult = new dVector((const dVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion_Slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion *arg2 = 0 ;
  float arg3 ;
  dQuaternion result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((dQuaternion const *)arg1)->Slerp((dQuaternion const &)*arg2,arg3);
  jresult = new dQuaternion((const dQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion_IntegrateOmega(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dVector *arg2 = 0 ;
  float arg3 ;
  dQuaternion result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((dQuaternion const *)arg1)->IntegrateOmega((dVector const &)*arg2,arg3);
  jresult = new dQuaternion((const dQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion___dQuaternion_multiply__(void * jarg1, void * jarg2) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion *arg2 = 0 ;
  dQuaternion result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((dQuaternion const *)arg1)->operator *((dQuaternion const &)*arg2);
  jresult = new dQuaternion((const dQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion___dQuaternion_add__(void * jarg1, void * jarg2) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion *arg2 = 0 ;
  dQuaternion result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((dQuaternion const *)arg1)->operator +((dQuaternion const &)*arg2);
  jresult = new dQuaternion((const dQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dQuaternion___dQuaternion_sub__(void * jarg1, void * jarg2) {
  void * jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  dQuaternion *arg2 = 0 ;
  dQuaternion result;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (dQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((dQuaternion const *)arg1)->operator -((dQuaternion const &)*arg2);
  jresult = new dQuaternion((const dQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_m_q0_set(void * jarg1, float jarg2) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_q0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dQuaternion_m_q0_get(void * jarg1) {
  float jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float result;
  
  arg1 = (dQuaternion *)jarg1; 
  result = (float) ((arg1)->m_q0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_m_q1_set(void * jarg1, float jarg2) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_q1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dQuaternion_m_q1_get(void * jarg1) {
  float jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float result;
  
  arg1 = (dQuaternion *)jarg1; 
  result = (float) ((arg1)->m_q1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_m_q2_set(void * jarg1, float jarg2) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_q2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dQuaternion_m_q2_get(void * jarg1) {
  float jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float result;
  
  arg1 = (dQuaternion *)jarg1; 
  result = (float) ((arg1)->m_q2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dQuaternion_m_q3_set(void * jarg1, float jarg2) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float arg2 ;
  
  arg1 = (dQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_q3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dQuaternion_m_q3_get(void * jarg1) {
  float jresult ;
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  float result;
  
  arg1 = (dQuaternion *)jarg1; 
  result = (float) ((arg1)->m_q3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dQuaternion(void * jarg1) {
  dQuaternion *arg1 = (dQuaternion *) 0 ;
  
  arg1 = (dQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_MAX_PRAM_INFO_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_MAX_PLACEMENT_CONTACTS_get() {
  int jresult ;
  int result;
  
  result = (int)(128);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dSymmetricBiconjugateGradientSolve(void * jarg1) {
  dSymmetricBiconjugateGradientSolve *arg1 = (dSymmetricBiconjugateGradientSolve *) 0 ;
  
  arg1 = (dSymmetricBiconjugateGradientSolve *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_dSymmetricBiconjugateGradientSolve_Solve(void * jarg1, int jarg2, double jarg3, void * jarg4, void * jarg5) {
  double jresult ;
  dSymmetricBiconjugateGradientSolve *arg1 = (dSymmetricBiconjugateGradientSolve *) 0 ;
  int arg2 ;
  double arg3 ;
  double *arg4 = (double *) (double *)0 ;
  double *arg5 = (double *) (double *)0 ;
  double result;
  
  arg1 = (dSymmetricBiconjugateGradientSolve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  result = (double)((dSymmetricBiconjugateGradientSolve const *)arg1)->Solve(arg2,arg3,arg4,(double const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dContact() {
  void * jresult ;
  dComplentaritySolver::dContact *result = 0 ;
  
  result = (dComplentaritySolver::dContact *)new dComplentaritySolver::dContact();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dContact_m_point_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dContact *arg1 = (dComplentaritySolver::dContact *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dContact *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_point = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dContact_m_point_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dContact *arg1 = (dComplentaritySolver::dContact *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dContact *)jarg1; 
  result = (dVector *)& ((arg1)->m_point);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dContact_m_normal_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dContact *arg1 = (dComplentaritySolver::dContact *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dContact *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_normal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dContact_m_normal_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dContact *arg1 = (dComplentaritySolver::dContact *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dContact *)jarg1; 
  result = (dVector *)& ((arg1)->m_normal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dContact(void * jarg1) {
  dComplentaritySolver::dContact *arg1 = (dComplentaritySolver::dContact *) 0 ;
  
  arg1 = (dComplentaritySolver::dContact *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dJacobian() {
  void * jresult ;
  dComplentaritySolver::dJacobian *result = 0 ;
  
  result = (dComplentaritySolver::dJacobian *)new dComplentaritySolver::dJacobian();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobian_m_linear_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dJacobian *arg1 = (dComplentaritySolver::dJacobian *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobian *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_linear = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dJacobian_m_linear_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dJacobian *arg1 = (dComplentaritySolver::dJacobian *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dJacobian *)jarg1; 
  result = (dVector *)& ((arg1)->m_linear);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobian_m_angular_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dJacobian *arg1 = (dComplentaritySolver::dJacobian *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobian *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_angular = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dJacobian_m_angular_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dJacobian *arg1 = (dComplentaritySolver::dJacobian *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dJacobian *)jarg1; 
  result = (dVector *)& ((arg1)->m_angular);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dJacobian(void * jarg1) {
  dComplentaritySolver::dJacobian *arg1 = (dComplentaritySolver::dJacobian *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobian *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianPair_m_jacobian_IM0_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dJacobianPair *arg1 = (dComplentaritySolver::dJacobianPair *) 0 ;
  dComplentaritySolver::dJacobian *arg2 = (dComplentaritySolver::dJacobian *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobianPair *)jarg1; 
  arg2 = (dComplentaritySolver::dJacobian *)jarg2; 
  if (arg1) (arg1)->m_jacobian_IM0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianPair_m_jacobian_IM0_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dJacobianPair *arg1 = (dComplentaritySolver::dJacobianPair *) 0 ;
  dComplentaritySolver::dJacobian *result = 0 ;
  
  arg1 = (dComplentaritySolver::dJacobianPair *)jarg1; 
  result = (dComplentaritySolver::dJacobian *)& ((arg1)->m_jacobian_IM0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianPair_m_jacobian_IM1_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dJacobianPair *arg1 = (dComplentaritySolver::dJacobianPair *) 0 ;
  dComplentaritySolver::dJacobian *arg2 = (dComplentaritySolver::dJacobian *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobianPair *)jarg1; 
  arg2 = (dComplentaritySolver::dJacobian *)jarg2; 
  if (arg1) (arg1)->m_jacobian_IM1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianPair_m_jacobian_IM1_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dJacobianPair *arg1 = (dComplentaritySolver::dJacobianPair *) 0 ;
  dComplentaritySolver::dJacobian *result = 0 ;
  
  arg1 = (dComplentaritySolver::dJacobianPair *)jarg1; 
  result = (dComplentaritySolver::dJacobian *)& ((arg1)->m_jacobian_IM1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dJacobianPair() {
  void * jresult ;
  dComplentaritySolver::dJacobianPair *result = 0 ;
  
  result = (dComplentaritySolver::dJacobianPair *)new dComplentaritySolver::dJacobianPair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dJacobianPair(void * jarg1) {
  dComplentaritySolver::dJacobianPair *arg1 = (dComplentaritySolver::dJacobianPair *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobianPair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_force_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_force = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_force_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_force);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_diagDamp_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_diagDamp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_diagDamp_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_diagDamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_deltaAccel_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_deltaAccel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_deltaAccel_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_deltaAccel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_invDJMinvJt_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_invDJMinvJt = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_invDJMinvJt_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_invDJMinvJt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_coordenateAccel_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_coordenateAccel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_coordenateAccel_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_coordenateAccel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_jointLowFriction_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_jointLowFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_jointLowFriction_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_jointLowFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_jointHighFriction_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_jointHighFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJacobianColum_m_jointHighFriction_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  result = (float) ((arg1)->m_jointHighFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dJacobianColum() {
  void * jresult ;
  dComplentaritySolver::dJacobianColum *result = 0 ;
  
  result = (dComplentaritySolver::dJacobianColum *)new dComplentaritySolver::dJacobianColum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dJacobianColum(void * jarg1) {
  dComplentaritySolver::dJacobianColum *arg1 = (dComplentaritySolver::dJacobianColum *) 0 ;
  
  arg1 = (dComplentaritySolver::dJacobianColum *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jacobians_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  dComplentaritySolver::dJacobianPair *arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (dComplentaritySolver::dJacobianPair *)jarg2; 
  {
    size_t ii;
    dComplentaritySolver::dJacobianPair *b = (dComplentaritySolver::dJacobianPair *) arg1->m_jacobians;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((dComplentaritySolver::dJacobianPair *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jacobians_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  dComplentaritySolver::dJacobianPair *result = 0 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (dComplentaritySolver::dJacobianPair *)(dComplentaritySolver::dJacobianPair *) ((arg1)->m_jacobians);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jointAccel_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_jointAccel;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jointAccel_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (float *)(float *) ((arg1)->m_jointAccel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jointLowFriction_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_jointLowFriction;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jointLowFriction_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (float *)(float *) ((arg1)->m_jointLowFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jointHighFriction_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_jointHighFriction;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_jointHighFriction_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (float *)(float *) ((arg1)->m_jointHighFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_timestep_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timestep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_timestep_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (float) ((arg1)->m_timestep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_timestepInv_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timestepInv = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_timestepInv_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (float) ((arg1)->m_timestepInv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_count_set(void * jarg1, int jarg2) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  int arg2 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dComplentaritySolver_dParamInfo_m_count_get(void * jarg1) {
  int jresult ;
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  int result;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  result = (int) ((arg1)->m_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dParamInfo() {
  void * jresult ;
  dComplentaritySolver::dParamInfo *result = 0 ;
  
  result = (dComplentaritySolver::dParamInfo *)new dComplentaritySolver::dParamInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dParamInfo(void * jarg1) {
  dComplentaritySolver::dParamInfo *arg1 = (dComplentaritySolver::dParamInfo *) 0 ;
  
  arg1 = (dComplentaritySolver::dParamInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dPointDerivativeParam() {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *result = 0 ;
  
  result = (dComplentaritySolver::dPointDerivativeParam *)new dComplentaritySolver::dPointDerivativeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_r0_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_r0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_r0_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_r0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_posit0_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_posit0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_posit0_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_posit0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_veloc0_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_veloc0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_veloc0_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_veloc0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_centripetal0_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_centripetal0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_centripetal0_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_centripetal0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_r1_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_r1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_r1_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_r1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_posit1_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_posit1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_posit1_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_posit1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_veloc1_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_veloc1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_veloc1_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_veloc1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_centripetal1_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *arg2 = (dVector *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  arg2 = (dVector *)jarg2; 
  if (arg1) (arg1)->m_centripetal1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dPointDerivativeParam_m_centripetal1_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  result = (dVector *)& ((arg1)->m_centripetal1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dPointDerivativeParam(void * jarg1) {
  dComplentaritySolver::dPointDerivativeParam *arg1 = (dComplentaritySolver::dPointDerivativeParam *) 0 ;
  
  arg1 = (dComplentaritySolver::dPointDerivativeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_rowsCount_set(void * jarg1, int jarg2) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  int arg2 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_rowsCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_rowsCount_get(void * jarg1) {
  int jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  int result;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  result = (int) ((arg1)->m_rowsCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_timeStep_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_timeStep_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  result = (float) ((arg1)->m_timeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_invTimeStep_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_invTimeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_invTimeStep_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  result = (float) ((arg1)->m_invTimeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_firstPassCoefFlag_set(void * jarg1, float jarg2) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_firstPassCoefFlag = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_firstPassCoefFlag_get(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  result = (float) ((arg1)->m_firstPassCoefFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_rowMatrix_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  dComplentaritySolver::dJacobianPair *arg2 = (dComplentaritySolver::dJacobianPair *) 0 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  arg2 = (dComplentaritySolver::dJacobianPair *)jarg2; 
  if (arg1) (arg1)->m_rowMatrix = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_rowMatrix_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  dComplentaritySolver::dJacobianPair *result = 0 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  result = (dComplentaritySolver::dJacobianPair *) ((arg1)->m_rowMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_colMatrix_set(void * jarg1, void * jarg2) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  dComplentaritySolver::dJacobianColum *arg2 = (dComplentaritySolver::dJacobianColum *) 0 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  arg2 = (dComplentaritySolver::dJacobianColum *)jarg2; 
  if (arg1) (arg1)->m_colMatrix = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dJointAccelerationDecriptor_m_colMatrix_get(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  dComplentaritySolver::dJacobianColum *result = 0 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  result = (dComplentaritySolver::dJacobianColum *) ((arg1)->m_colMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dJointAccelerationDecriptor() {
  void * jresult ;
  dComplentaritySolver::dJointAccelerationDecriptor *result = 0 ;
  
  result = (dComplentaritySolver::dJointAccelerationDecriptor *)new dComplentaritySolver::dJointAccelerationDecriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dJointAccelerationDecriptor(void * jarg1) {
  dComplentaritySolver::dJointAccelerationDecriptor *arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *) 0 ;
  
  arg1 = (dComplentaritySolver::dJointAccelerationDecriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dBilateralJoint(void * jarg1) {
  dComplentaritySolver::dBilateralJoint *arg1 = (dComplentaritySolver::dBilateralJoint *) 0 ;
  
  arg1 = (dComplentaritySolver::dBilateralJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBilateralJoint_Init(void * jarg1, void * jarg2, void * jarg3) {
  dComplentaritySolver::dBilateralJoint *arg1 = (dComplentaritySolver::dBilateralJoint *) 0 ;
  dComplentaritySolver::dBodyState *arg2 = (dComplentaritySolver::dBodyState *) (dComplentaritySolver::dBodyState *)0 ;
  dComplentaritySolver::dBodyState *arg3 = (dComplentaritySolver::dBodyState *) (dComplentaritySolver::dBodyState *)0 ;
  
  arg1 = (dComplentaritySolver::dBilateralJoint *)jarg1; 
  arg2 = (dComplentaritySolver::dBodyState *)jarg2; 
  arg3 = (dComplentaritySolver::dBodyState *)jarg3; 
  (arg1)->Init(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dFrictionLessContactJoint() {
  void * jresult ;
  dComplentaritySolver::dFrictionLessContactJoint *result = 0 ;
  
  result = (dComplentaritySolver::dFrictionLessContactJoint *)new dComplentaritySolver::dFrictionLessContactJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dFrictionLessContactJoint(void * jarg1) {
  dComplentaritySolver::dFrictionLessContactJoint *arg1 = (dComplentaritySolver::dFrictionLessContactJoint *) 0 ;
  
  arg1 = (dComplentaritySolver::dFrictionLessContactJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dFrictionLessContactJoint_SetContacts(void * jarg1, int jarg2, void * jarg3, float jarg4) {
  dComplentaritySolver::dFrictionLessContactJoint *arg1 = (dComplentaritySolver::dFrictionLessContactJoint *) 0 ;
  int arg2 ;
  dComplentaritySolver::dContact *arg3 = (dComplentaritySolver::dContact *) (dComplentaritySolver::dContact *)0 ;
  float arg4 ;
  
  arg1 = (dComplentaritySolver::dFrictionLessContactJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (dComplentaritySolver::dContact *)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetContacts(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver_dBodyState() {
  void * jresult ;
  dComplentaritySolver::dBodyState *result = 0 ;
  
  result = (dComplentaritySolver::dBodyState *)new dComplentaritySolver::dBodyState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver_dBodyState(void * jarg1) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetMass(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (float)((dComplentaritySolver::dBodyState const *)arg1)->GetMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetMass(void * jarg1, float jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMass(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetInvMass(void * jarg1) {
  float jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  float result;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (float)((dComplentaritySolver::dBodyState const *)arg1)->GetInvMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetInertia(void * jarg1, float jarg2, float jarg3, float jarg4) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetInertia(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetInertia(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  ((dComplentaritySolver::dBodyState const *)arg1)->GetInertia(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetVeloc(void * jarg1, void * jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *arg2 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetVeloc((dVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetOmega(void * jarg1, void * jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *arg2 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetOmega((dVector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetOmega(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dVector *) &((dComplentaritySolver::dBodyState const *)arg1)->GetOmega();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetVelocity(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dVector *) &((dComplentaritySolver::dBodyState const *)arg1)->GetVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_UpdateInertia(void * jarg1) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  (arg1)->UpdateInertia();
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetMatrix(void * jarg1, void * jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dMatrix *arg2 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrix((dMatrix const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetMatrix(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dMatrix *) &((dComplentaritySolver::dBodyState const *)arg1)->GetMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetLocalMatrix(void * jarg1, void * jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dMatrix *arg2 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return ;
  } 
  (arg1)->SetLocalMatrix((dMatrix const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetLocalMatrix(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dMatrix *) &((dComplentaritySolver::dBodyState const *)arg1)->GetLocalMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetForce(void * jarg1, void * jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *arg2 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetForce((dVector const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_SetTorque(void * jarg1, void * jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *arg2 = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetTorque((dVector const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetForce(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dVector *) &((dComplentaritySolver::dBodyState const *)arg1)->GetForce();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetTorque(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dVector *) &((dComplentaritySolver::dBodyState const *)arg1)->GetTorque();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_GetCenterOfMass(void * jarg1) {
  void * jresult ;
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  dVector *result = 0 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  result = (dVector *) &((dComplentaritySolver::dBodyState const *)arg1)->GetCenterOfMass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_dBodyState_IntegrateVelocity(void * jarg1, float jarg2) {
  dComplentaritySolver::dBodyState *arg1 = (dComplentaritySolver::dBodyState *) 0 ;
  float arg2 ;
  
  arg1 = (dComplentaritySolver::dBodyState *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->IntegrateVelocity(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dComplentaritySolver() {
  void * jresult ;
  dComplentaritySolver *result = 0 ;
  
  result = (dComplentaritySolver *)new dComplentaritySolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dComplentaritySolver(void * jarg1) {
  dComplentaritySolver *arg1 = (dComplentaritySolver *) 0 ;
  
  arg1 = (dComplentaritySolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dComplentaritySolver_GetActiveJoints(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  dComplentaritySolver *arg1 = (dComplentaritySolver *) 0 ;
  dComplentaritySolver::dBilateralJoint **arg2 = (dComplentaritySolver::dBilateralJoint **) (dComplentaritySolver::dBilateralJoint **)0 ;
  int arg3 ;
  int result;
  
  arg1 = (dComplentaritySolver *)jarg1; 
  arg2 = (dComplentaritySolver::dBilateralJoint **)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->GetActiveJoints(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dComplentaritySolver_BuildJacobianMatrix(void * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, int jarg7) {
  int jresult ;
  dComplentaritySolver *arg1 = (dComplentaritySolver *) 0 ;
  int arg2 ;
  dComplentaritySolver::dBilateralJoint **arg3 = (dComplentaritySolver::dBilateralJoint **) (dComplentaritySolver::dBilateralJoint **)0 ;
  float arg4 ;
  dComplentaritySolver::dJacobianPair *arg5 = (dComplentaritySolver::dJacobianPair *) (dComplentaritySolver::dJacobianPair *)0 ;
  dComplentaritySolver::dJacobianColum *arg6 = (dComplentaritySolver::dJacobianColum *) (dComplentaritySolver::dJacobianColum *)0 ;
  int arg7 ;
  int result;
  
  arg1 = (dComplentaritySolver *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (dComplentaritySolver::dBilateralJoint **)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (dComplentaritySolver::dJacobianPair *)jarg5; 
  arg6 = (dComplentaritySolver::dJacobianColum *)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)(arg1)->BuildJacobianMatrix(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dComplentaritySolver_CalculateReactionsForces(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, float jarg6, void * jarg7, void * jarg8) {
  dComplentaritySolver *arg1 = (dComplentaritySolver *) 0 ;
  int arg2 ;
  dComplentaritySolver::dBodyState **arg3 = (dComplentaritySolver::dBodyState **) (dComplentaritySolver::dBodyState **)0 ;
  int arg4 ;
  dComplentaritySolver::dBilateralJoint **arg5 = (dComplentaritySolver::dBilateralJoint **) (dComplentaritySolver::dBilateralJoint **)0 ;
  float arg6 ;
  dComplentaritySolver::dJacobianPair *arg7 = (dComplentaritySolver::dJacobianPair *) (dComplentaritySolver::dJacobianPair *)0 ;
  dComplentaritySolver::dJacobianColum *arg8 = (dComplentaritySolver::dJacobianColum *) (dComplentaritySolver::dJacobianColum *)0 ;
  
  arg1 = (dComplentaritySolver *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (dComplentaritySolver::dBodyState **)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (dComplentaritySolver::dBilateralJoint **)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (dComplentaritySolver::dJacobianPair *)jarg7; 
  arg8 = (dComplentaritySolver::dJacobianColum *)jarg8; 
  (arg1)->CalculateReactionsForces(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT int SWIGSTDCALL CSharp_D_MAX_ENTRIES_IN_FREELIST_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dContainersAlloc___dContainers_Alloc__(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  dContainersAlloc *arg1 = (dContainersAlloc *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  arg1 = (dContainersAlloc *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (void *)(arg1)->operator new(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dContainersAlloc___dContainers_Freec__(void * jarg1, void * jarg2) {
  dContainersAlloc *arg1 = (dContainersAlloc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (dContainersAlloc *)jarg1; 
  arg2 = jarg2; 
  (arg1)->operator delete(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dContainersAlloc() {
  void * jresult ;
  dContainersAlloc *result = 0 ;
  
  result = (dContainersAlloc *)new dContainersAlloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dContainersAlloc(void * jarg1) {
  dContainersAlloc *arg1 = (dContainersAlloc *) 0 ;
  
  arg1 = (dContainersAlloc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dContainersAlloc_Alloc(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  void *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (void *)dContainersAlloc::Alloc(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dContainersAlloc_Free(void * jarg1) {
  void *arg1 = (void *) (void *)0 ;
  
  arg1 = jarg1; 
  dContainersAlloc::Free(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dContainerFixSizeAllocator_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  dContainerFixSizeAllocator *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (dContainerFixSizeAllocator *)dContainerFixSizeAllocator::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dContainerFixSizeAllocator(void * jarg1) {
  dContainerFixSizeAllocator *arg1 = (dContainerFixSizeAllocator *) 0 ;
  
  arg1 = (dContainerFixSizeAllocator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dContainerFixSizeAllocator_Alloc(void * jarg1) {
  void * jresult ;
  dContainerFixSizeAllocator *arg1 = (dContainerFixSizeAllocator *) 0 ;
  void *result = 0 ;
  
  arg1 = (dContainerFixSizeAllocator *)jarg1; 
  result = (void *)(arg1)->Alloc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dContainerFixSizeAllocator_Free(void * jarg1, void * jarg2) {
  dContainerFixSizeAllocator *arg1 = (dContainerFixSizeAllocator *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (dContainerFixSizeAllocator *)jarg1; 
  arg2 = jarg2; 
  (arg1)->Free(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dContainerFixSizeAllocator_Flush(void * jarg1) {
  dContainerFixSizeAllocator *arg1 = (dContainerFixSizeAllocator *) 0 ;
  
  arg1 = (dContainerFixSizeAllocator *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBezierSpline__SWIG_0() {
  void * jresult ;
  dBezierSpline *result = 0 ;
  
  result = (dBezierSpline *)new dBezierSpline();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dBezierSpline__SWIG_1(void * jarg1) {
  void * jresult ;
  dBezierSpline *arg1 = 0 ;
  dBezierSpline *result = 0 ;
  
  arg1 = (dBezierSpline *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBezierSpline const & type is null", 0);
    return 0;
  } 
  result = (dBezierSpline *)new dBezierSpline((dBezierSpline const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dBezierSpline(void * jarg1) {
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline___dBezierSpline__Assigment__(void * jarg1, void * jarg2) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  dBezierSpline *arg2 = 0 ;
  dBezierSpline *result = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (dBezierSpline *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBezierSpline const & type is null", 0);
    return 0;
  } 
  result = (dBezierSpline *) &(arg1)->operator =((dBezierSpline const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dBezierSpline_GetDegree(void * jarg1) {
  int jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int result;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (int)((dBezierSpline const *)arg1)->GetDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline_CurvePoint(void * jarg1, double jarg2) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  dBigVector result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((dBezierSpline const *)arg1)->CurvePoint(arg2);
  jresult = new dBigVector((const dBigVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline_CurveDerivative__SWIG_0(void * jarg1, double jarg2, int jarg3) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  int arg3 ;
  dBigVector result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = ((dBezierSpline const *)arg1)->CurveDerivative(arg2,arg3);
  jresult = new dBigVector((const dBigVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline_CurveDerivative__SWIG_1(void * jarg1, double jarg2) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  dBigVector result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((dBezierSpline const *)arg1)->CurveDerivative(arg2);
  jresult = new dBigVector((const dBigVector &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dBezierSpline_CurveAllDerivatives(void * jarg1, double jarg2, void * jarg3) {
  int jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  dBigVector *arg3 = (dBigVector *) (dBigVector *)0 ;
  int result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (dBigVector *)jarg3; 
  result = (int)((dBezierSpline const *)arg1)->CurveAllDerivatives(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_dBezierSpline_CalculateLength(void * jarg1, double jarg2) {
  double jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((dBezierSpline const *)arg1)->CalculateLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dBezierSpline_GlobalCubicInterpolation(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int arg2 ;
  dBigVector *arg3 = (dBigVector *) (dBigVector *)0 ;
  dBigVector *arg4 = 0 ;
  dBigVector *arg5 = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (dBigVector *)jarg3; 
  arg4 = (dBigVector *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector const & type is null", 0);
    return ;
  } 
  arg5 = (dBigVector *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector const & type is null", 0);
    return ;
  } 
  (arg1)->GlobalCubicInterpolation(arg2,(dBigVector const *)arg3,(dBigVector const &)*arg4,(dBigVector const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dBezierSpline_CreateFromKnotVectorAndControlPoints(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) (double *)0 ;
  dBigVector *arg5 = (dBigVector *) (dBigVector *)0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (dBigVector *)jarg5; 
  (arg1)->CreateFromKnotVectorAndControlPoints(arg2,arg3,(double const *)arg4,(dBigVector const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_dBezierSpline_InsertKnot(void * jarg1, double jarg2) {
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->InsertKnot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_dBezierSpline_RemoveKnot(void * jarg1, double jarg2, double jarg3) {
  unsigned int jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->RemoveKnot(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_dBezierSpline_GetControlPointCount(void * jarg1) {
  int jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int result;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (int)((dBezierSpline const *)arg1)->GetControlPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline___dBezierSpline__GetControlPointArray__(void * jarg1) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  dBigVector *result = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (dBigVector *)(arg1)->GetControlPointArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline___dBezierSpline__GetControlPointArray__Const(void * jarg1) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  dBigVector *result = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (dBigVector *)((dBezierSpline const *)arg1)->GetControlPointArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline_GetControlPoint(void * jarg1, int jarg2) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int arg2 ;
  dBigVector result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((dBezierSpline const *)arg1)->GetControlPoint(arg2);
  jresult = new dBigVector((const dBigVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dBezierSpline_SetControlPoint(void * jarg1, int jarg2, void * jarg3) {
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int arg2 ;
  dBigVector *arg3 = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (dBigVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector const & type is null", 0);
    return ;
  } 
  (arg1)->SetControlPoint(arg2,(dBigVector const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_dBezierSpline_GetKnotCount(void * jarg1) {
  int jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int result;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (int)((dBezierSpline const *)arg1)->GetKnotCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline___dBezierSpline__GetKnotArray__(void * jarg1) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double *result = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (double *)(arg1)->GetKnotArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dBezierSpline___dBezierSpline__GetKnotArray__Const(void * jarg1) {
  void * jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  double *result = 0 ;
  
  arg1 = (dBezierSpline *)jarg1; 
  result = (double *)((dBezierSpline const *)arg1)->GetKnotArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_dBezierSpline_GetKnot(void * jarg1, int jarg2) {
  double jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((dBezierSpline const *)arg1)->GetKnot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_dBezierSpline_FindClosestKnot__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  double jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  dBigVector *arg2 = 0 ;
  dBigVector *arg3 = 0 ;
  int arg4 ;
  double result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (dBigVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector & type is null", 0);
    return 0;
  } 
  arg3 = (dBigVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (double)((dBezierSpline const *)arg1)->FindClosestKnot(*arg2,(dBigVector const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_dBezierSpline_FindClosestKnot__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  dBezierSpline *arg1 = (dBezierSpline *) 0 ;
  dBigVector *arg2 = 0 ;
  dBigVector *arg3 = 0 ;
  double result;
  
  arg1 = (dBezierSpline *)jarg1; 
  arg2 = (dBigVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector & type is null", 0);
    return 0;
  } 
  arg3 = (dBigVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dBigVector const & type is null", 0);
    return 0;
  } 
  result = (double)((dBezierSpline const *)arg1)->FindClosestKnot(*arg2,(dBigVector const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomScopeLock(void * jarg1) {
  void * jresult ;
  unsigned int *arg1 = (unsigned int *) (unsigned int *)0 ;
  CustomScopeLock *result = 0 ;
  
  arg1 = (unsigned int *)jarg1; 
  result = (CustomScopeLock *)new CustomScopeLock(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomScopeLock(void * jarg1) {
  CustomScopeLock *arg1 = (CustomScopeLock *) 0 ;
  
  arg1 = (CustomScopeLock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomScopeLock_m_atomicLock_set(void * jarg1, void * jarg2) {
  CustomScopeLock *arg1 = (CustomScopeLock *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (CustomScopeLock *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  if (arg1) (arg1)->m_atomicLock = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomScopeLock_m_atomicLock_get(void * jarg1) {
  void * jresult ;
  CustomScopeLock *arg1 = (CustomScopeLock *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (CustomScopeLock *)jarg1; 
  result = (unsigned int *) ((arg1)->m_atomicLock);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomAlloc___CustomAlloc_Alloc__(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  CustomAlloc *arg1 = (CustomAlloc *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  arg1 = (CustomAlloc *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (void *)(arg1)->operator new(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomAlloc___CustomAlloc_Delete__(void * jarg1, void * jarg2) {
  CustomAlloc *arg1 = (CustomAlloc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (CustomAlloc *)jarg1; 
  arg2 = jarg2; 
  (arg1)->operator delete(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomAlloc() {
  void * jresult ;
  CustomAlloc *result = 0 ;
  
  result = (CustomAlloc *)new CustomAlloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomAlloc(void * jarg1) {
  CustomAlloc *arg1 = (CustomAlloc *) 0 ;
  
  arg1 = (CustomAlloc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint_SerializeMetaData(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) (char *)0 ;
  CustomJoint::SerializeMetaData *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CustomJoint::SerializeMetaData *)new CustomJoint::SerializeMetaData((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_SerializeMetaData_SerializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CustomJoint::SerializeMetaData *arg1 = (CustomJoint::SerializeMetaData *) 0 ;
  CustomJoint *arg2 = (CustomJoint *) (CustomJoint *)0 ;
  NewtonSerializeCallback arg3 = (NewtonSerializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (CustomJoint::SerializeMetaData *)jarg1; 
  arg2 = (CustomJoint *)jarg2; 
  arg3 = (NewtonSerializeCallback)jarg3; 
  arg4 = jarg4; 
  (arg1)->SerializeJoint(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_SerializeMetaData_DeserializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CustomJoint::SerializeMetaData *arg1 = (CustomJoint::SerializeMetaData *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonDeserializeCallback arg4 = (NewtonDeserializeCallback) 0 ;
  void *arg5 = (void *) (void *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (CustomJoint::SerializeMetaData *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonDeserializeCallback)jarg4; 
  arg5 = jarg5; 
  result = (CustomJoint *)(arg1)->DeserializeJoint(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomJoint_SerializeMetaData(void * jarg1) {
  CustomJoint::SerializeMetaData *arg1 = (CustomJoint::SerializeMetaData *) 0 ;
  
  arg1 = (CustomJoint::SerializeMetaData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint_SerializeMetaDataDictionary() {
  void * jresult ;
  CustomJoint::SerializeMetaDataDictionary *result = 0 ;
  
  result = (CustomJoint::SerializeMetaDataDictionary *)new CustomJoint::SerializeMetaDataDictionary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomJoint_SerializeMetaDataDictionary(void * jarg1) {
  CustomJoint::SerializeMetaDataDictionary *arg1 = (CustomJoint::SerializeMetaDataDictionary *) 0 ;
  
  arg1 = (CustomJoint::SerializeMetaDataDictionary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint_AngularIntegration__SWIG_0() {
  void * jresult ;
  CustomJoint::AngularIntegration *result = 0 ;
  
  result = (CustomJoint::AngularIntegration *)new CustomJoint::AngularIntegration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint_AngularIntegration__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  CustomJoint::AngularIntegration *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (CustomJoint::AngularIntegration *)new CustomJoint::AngularIntegration(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomJoint_AngularIntegration_GetAngle(void * jarg1) {
  float jresult ;
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  float result;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  result = (float)((CustomJoint::AngularIntegration const *)arg1)->GetAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_AngularIntegration_SetAngle(void * jarg1, float jarg2) {
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  float arg2 ;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomJoint_AngularIntegration_Update__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->Update(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_AngularIntegration___CustomJoint_AngularIntegration_Add__(void * jarg1, void * jarg2) {
  void * jresult ;
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  CustomJoint::AngularIntegration *arg2 = 0 ;
  CustomJoint::AngularIntegration result;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  arg2 = (CustomJoint::AngularIntegration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CustomJoint::AngularIntegration const & type is null", 0);
    return 0;
  } 
  result = ((CustomJoint::AngularIntegration const *)arg1)->operator +((CustomJoint::AngularIntegration const &)*arg2);
  jresult = new CustomJoint::AngularIntegration((const CustomJoint::AngularIntegration &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_AngularIntegration___CustomJoint_AngularIntegration_Sub__(void * jarg1, void * jarg2) {
  void * jresult ;
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  CustomJoint::AngularIntegration *arg2 = 0 ;
  CustomJoint::AngularIntegration result;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  arg2 = (CustomJoint::AngularIntegration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CustomJoint::AngularIntegration const & type is null", 0);
    return 0;
  } 
  result = ((CustomJoint::AngularIntegration const *)arg1)->operator -((CustomJoint::AngularIntegration const &)*arg2);
  jresult = new CustomJoint::AngularIntegration((const CustomJoint::AngularIntegration &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomJoint_AngularIntegration_Update__SWIG_1(void * jarg1, float jarg2) {
  float jresult ;
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Update(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomJoint_AngularIntegration(void * jarg1) {
  CustomJoint::AngularIntegration *arg1 = (CustomJoint::AngularIntegration *) 0 ;
  
  arg1 = (CustomJoint::AngularIntegration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint__SWIG_0() {
  void * jresult ;
  CustomJoint *result = 0 ;
  
  result = (CustomJoint *)new CustomJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint__SWIG_1(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  result = (CustomJoint *)new CustomJoint(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomJoint__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  NewtonBody *arg1 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonDeserializeCallback arg3 = (NewtonDeserializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (NewtonBody *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonDeserializeCallback)jarg3; 
  arg4 = jarg4; 
  result = (CustomJoint *)new CustomJoint(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomJoint(void * jarg1) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_Initalize(void * jarg1) {
  NewtonWorld *arg1 = (NewtonWorld *) (NewtonWorld *)0 ;
  
  arg1 = (NewtonWorld *)jarg1; 
  CustomJoint::Initalize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_Serialize(void * jarg1, void * jarg2, void * jarg3) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  NewtonSerializeCallback arg2 = (NewtonSerializeCallback) 0 ;
  void *arg3 = (void *) (void *)0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (NewtonSerializeCallback)jarg2; 
  arg3 = jarg3; 
  ((CustomJoint const *)arg1)->Serialize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_SetBodiesCollisionState(void * jarg1, int jarg2) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  int arg2 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBodiesCollisionState(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CustomJoint_GetBodiesCollisionState(void * jarg1) {
  int jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  int result;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (int)((CustomJoint const *)arg1)->GetBodiesCollisionState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetBody0(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (NewtonBody *)((CustomJoint const *)arg1)->GetBody0();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetBody1(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  NewtonBody *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (NewtonBody *)((CustomJoint const *)arg1)->GetBody1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetJoint(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  NewtonJoint *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (NewtonJoint *)((CustomJoint const *)arg1)->GetJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetMatrix0(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (dMatrix *) &((CustomJoint const *)arg1)->GetMatrix0();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetMatrix1(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  dMatrix *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (dMatrix *) &((CustomJoint const *)arg1)->GetMatrix1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomJoint_GetTypeName(void * jarg1) {
  char * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  char *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (char *)((CustomJoint const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetSerializeKey(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  dCRCTYPE result;
  
  arg1 = (CustomJoint *)jarg1; 
  result = ((CustomJoint const *)arg1)->GetSerializeKey();
  jresult = new dCRCTYPE((const dCRCTYPE &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_GetInfo(void * jarg1, void * jarg2) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  NewtonJointRecord *arg2 = (NewtonJointRecord *) (NewtonJointRecord *)0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (NewtonJointRecord *)jarg2; 
  ((CustomJoint const *)arg1)->GetInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_SetUserData(void * jarg1, void * jarg2) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomJoint_GetUserData(void * jarg1) {
  void * jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  void *result = 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (void *)((CustomJoint const *)arg1)->GetUserData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomJoint_GetStiffness(void * jarg1) {
  float jresult ;
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  float result;
  
  arg1 = (CustomJoint *)jarg1; 
  result = (float)((CustomJoint const *)arg1)->GetStiffness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_SetStiffness(void * jarg1, float jarg2) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  float arg2 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStiffness(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_SetUserDestructorCallback(void * jarg1, void * jarg2) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  JointUserDestructorCallback arg2 = (JointUserDestructorCallback) 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (JointUserDestructorCallback)jarg2; 
  (arg1)->SetUserDestructorCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_SetUserSubmintConstraintCallback(void * jarg1, void * jarg2) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  JointUserSubmitConstraintCallback arg2 = (JointUserSubmitConstraintCallback) 0 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (JointUserSubmitConstraintCallback)jarg2; 
  (arg1)->SetUserSubmintConstraintCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomJoint_UserUpdate(void * jarg1, float jarg2, int jarg3) {
  CustomJoint *arg1 = (CustomJoint *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (CustomJoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UserUpdate(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomPointToPoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  dVector *arg1 = 0 ;
  dVector *arg2 = 0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  CustomPointToPoint *result = 0 ;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  result = (CustomPointToPoint *)new CustomPointToPoint((dVector const &)*arg1,(dVector const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomPointToPoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dVector *arg1 = 0 ;
  dVector *arg2 = 0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  CustomPointToPoint *result = 0 ;
  
  arg1 = (dVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg2 = (dVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dVector const & type is null", 0);
    return 0;
  } 
  arg3 = (NewtonBody *)jarg3; 
  result = (CustomPointToPoint *)new CustomPointToPoint((dVector const &)*arg1,(dVector const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomPointToPoint(void * jarg1) {
  CustomPointToPoint *arg1 = (CustomPointToPoint *) 0 ;
  
  arg1 = (CustomPointToPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomPointToPoint_GetSerializeKey(void * jarg1) {
  void * jresult ;
  CustomPointToPoint *arg1 = (CustomPointToPoint *) 0 ;
  dCRCTYPE result;
  
  arg1 = (CustomPointToPoint *)jarg1; 
  result = ((CustomPointToPoint const *)arg1)->GetSerializeKey();
  jresult = new dCRCTYPE((const dCRCTYPE &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomPointToPoint_GetTypeName(void * jarg1) {
  char * jresult ;
  CustomPointToPoint *arg1 = (CustomPointToPoint *) 0 ;
  char *result = 0 ;
  
  arg1 = (CustomPointToPoint *)jarg1; 
  result = (char *)((CustomPointToPoint const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomPointToPoint_SerializeMetaData_CustomPointToPoint(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) (char *)0 ;
  CustomPointToPoint::SerializeMetaData_CustomPointToPoint *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *)new CustomPointToPoint::SerializeMetaData_CustomPointToPoint((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomPointToPoint_SerializeMetaData_CustomPointToPoint_SerializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CustomPointToPoint::SerializeMetaData_CustomPointToPoint *arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *) 0 ;
  CustomJoint *arg2 = (CustomJoint *) (CustomJoint *)0 ;
  NewtonSerializeCallback arg3 = (NewtonSerializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *)jarg1; 
  arg2 = (CustomJoint *)jarg2; 
  arg3 = (NewtonSerializeCallback)jarg3; 
  arg4 = jarg4; 
  (arg1)->SerializeJoint(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomPointToPoint_SerializeMetaData_CustomPointToPoint_DeserializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CustomPointToPoint::SerializeMetaData_CustomPointToPoint *arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonDeserializeCallback arg4 = (NewtonDeserializeCallback) 0 ;
  void *arg5 = (void *) (void *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonDeserializeCallback)jarg4; 
  arg5 = jarg5; 
  result = (CustomJoint *)(arg1)->DeserializeJoint(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomPointToPoint_SerializeMetaData_CustomPointToPoint(void * jarg1) {
  CustomPointToPoint::SerializeMetaData_CustomPointToPoint *arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *) 0 ;
  
  arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomPointToPoint_m_metaData_CustomPointToPoint_set(void * jarg1) {
  CustomPointToPoint::SerializeMetaData_CustomPointToPoint *arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *) 0 ;
  
  arg1 = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *)jarg1; 
  CustomPointToPoint::m_metaData_CustomPointToPoint = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomPointToPoint_m_metaData_CustomPointToPoint_get() {
  void * jresult ;
  CustomPointToPoint::SerializeMetaData_CustomPointToPoint *result = 0 ;
  
  result = (CustomPointToPoint::SerializeMetaData_CustomPointToPoint *)&CustomPointToPoint::m_metaData_CustomPointToPoint;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomBallAndSocket__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  CustomBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  result = (CustomBallAndSocket *)new CustomBallAndSocket((dMatrix const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomBallAndSocket__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  CustomBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  result = (CustomBallAndSocket *)new CustomBallAndSocket((dMatrix const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomBallAndSocket__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  dMatrix *arg2 = 0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  CustomBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonBody *)jarg4; 
  result = (CustomBallAndSocket *)new CustomBallAndSocket((dMatrix const &)*arg1,(dMatrix const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomBallAndSocket__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  dMatrix *arg2 = 0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  CustomBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (dMatrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg3 = (NewtonBody *)jarg3; 
  result = (CustomBallAndSocket *)new CustomBallAndSocket((dMatrix const &)*arg1,(dMatrix const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomBallAndSocket(void * jarg1) {
  CustomBallAndSocket *arg1 = (CustomBallAndSocket *) 0 ;
  
  arg1 = (CustomBallAndSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomBallAndSocket_GetSerializeKey(void * jarg1) {
  void * jresult ;
  CustomBallAndSocket *arg1 = (CustomBallAndSocket *) 0 ;
  dCRCTYPE result;
  
  arg1 = (CustomBallAndSocket *)jarg1; 
  result = ((CustomBallAndSocket const *)arg1)->GetSerializeKey();
  jresult = new dCRCTYPE((const dCRCTYPE &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomBallAndSocket_GetTypeName(void * jarg1) {
  char * jresult ;
  CustomBallAndSocket *arg1 = (CustomBallAndSocket *) 0 ;
  char *result = 0 ;
  
  arg1 = (CustomBallAndSocket *)jarg1; 
  result = (char *)((CustomBallAndSocket const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomBallAndSocket_SerializeMetaData_CustomBallAndSocket(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) (char *)0 ;
  CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *)new CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomBallAndSocket_SerializeMetaData_CustomBallAndSocket_SerializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *) 0 ;
  CustomJoint *arg2 = (CustomJoint *) (CustomJoint *)0 ;
  NewtonSerializeCallback arg3 = (NewtonSerializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *)jarg1; 
  arg2 = (CustomJoint *)jarg2; 
  arg3 = (NewtonSerializeCallback)jarg3; 
  arg4 = jarg4; 
  (arg1)->SerializeJoint(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomBallAndSocket_SerializeMetaData_CustomBallAndSocket_DeserializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonDeserializeCallback arg4 = (NewtonDeserializeCallback) 0 ;
  void *arg5 = (void *) (void *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonDeserializeCallback)jarg4; 
  arg5 = jarg5; 
  result = (CustomJoint *)(arg1)->DeserializeJoint(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomBallAndSocket_SerializeMetaData_CustomBallAndSocket(void * jarg1) {
  CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *) 0 ;
  
  arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomBallAndSocket_m_metaData_CustomBallAndSocket_set(void * jarg1) {
  CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *) 0 ;
  
  arg1 = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *)jarg1; 
  CustomBallAndSocket::m_metaData_CustomBallAndSocket = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomBallAndSocket_m_metaData_CustomBallAndSocket_get() {
  void * jresult ;
  CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *result = 0 ;
  
  result = (CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *)&CustomBallAndSocket::m_metaData_CustomBallAndSocket;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomLimitBallAndSocket__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  CustomLimitBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  result = (CustomLimitBallAndSocket *)new CustomLimitBallAndSocket((dMatrix const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomLimitBallAndSocket__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  CustomLimitBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  result = (CustomLimitBallAndSocket *)new CustomLimitBallAndSocket((dMatrix const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomLimitBallAndSocket__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  dMatrix *arg3 = 0 ;
  NewtonBody *arg4 = (NewtonBody *) (NewtonBody *)0 ;
  CustomLimitBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (dMatrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg4 = (NewtonBody *)jarg4; 
  result = (CustomLimitBallAndSocket *)new CustomLimitBallAndSocket((dMatrix const &)*arg1,arg2,(dMatrix const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomLimitBallAndSocket(void * jarg1) {
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomLimitBallAndSocket_SetConeAngle(void * jarg1, float jarg2) {
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  float arg2 ;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetConeAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomLimitBallAndSocket_SetTwistAngle(void * jarg1, float jarg2, float jarg3) {
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetTwistAngle(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomLimitBallAndSocket_GetConeAngle(void * jarg1) {
  float jresult ;
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  float result;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  result = (float)((CustomLimitBallAndSocket const *)arg1)->GetConeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomLimitBallAndSocket_GetTwistAngle(void * jarg1, void * jarg2, void * jarg3) {
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  ((CustomLimitBallAndSocket const *)arg1)->GetTwistAngle(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomLimitBallAndSocket_GetSerializeKey(void * jarg1) {
  void * jresult ;
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  dCRCTYPE result;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  result = ((CustomLimitBallAndSocket const *)arg1)->GetSerializeKey();
  jresult = new dCRCTYPE((const dCRCTYPE &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomLimitBallAndSocket_GetTypeName(void * jarg1) {
  char * jresult ;
  CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket *) 0 ;
  char *result = 0 ;
  
  arg1 = (CustomLimitBallAndSocket *)jarg1; 
  result = (char *)((CustomLimitBallAndSocket const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomLimitBallAndSocket_SerializeMetaData_CustomLimitBallAndSocket(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) (char *)0 ;
  CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *)new CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomLimitBallAndSocket_SerializeMetaData_CustomLimitBallAndSocket_SerializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *) 0 ;
  CustomJoint *arg2 = (CustomJoint *) (CustomJoint *)0 ;
  NewtonSerializeCallback arg3 = (NewtonSerializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *)jarg1; 
  arg2 = (CustomJoint *)jarg2; 
  arg3 = (NewtonSerializeCallback)jarg3; 
  arg4 = jarg4; 
  (arg1)->SerializeJoint(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomLimitBallAndSocket_SerializeMetaData_CustomLimitBallAndSocket_DeserializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonDeserializeCallback arg4 = (NewtonDeserializeCallback) 0 ;
  void *arg5 = (void *) (void *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonDeserializeCallback)jarg4; 
  arg5 = jarg5; 
  result = (CustomJoint *)(arg1)->DeserializeJoint(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomLimitBallAndSocket_SerializeMetaData_CustomLimitBallAndSocket(void * jarg1) {
  CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *) 0 ;
  
  arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomLimitBallAndSocket_m_metaData_CustomLimitBallAndSocket_set(void * jarg1) {
  CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *) 0 ;
  
  arg1 = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *)jarg1; 
  CustomLimitBallAndSocket::m_metaData_CustomLimitBallAndSocket = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomLimitBallAndSocket_m_metaData_CustomLimitBallAndSocket_get() {
  void * jresult ;
  CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *result = 0 ;
  
  result = (CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *)&CustomLimitBallAndSocket::m_metaData_CustomLimitBallAndSocket;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomBallAndSocketWithFriction(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  float arg4 ;
  CustomBallAndSocketWithFriction *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (float)jarg4; 
  result = (CustomBallAndSocketWithFriction *)new CustomBallAndSocketWithFriction((dMatrix const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomBallAndSocketWithFriction_SubmitConstraints(void * jarg1, float jarg2, int jarg3) {
  CustomBallAndSocketWithFriction *arg1 = (CustomBallAndSocketWithFriction *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (CustomBallAndSocketWithFriction *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SubmitConstraints(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomBallAndSocketWithFriction_m_dryFriction_set(void * jarg1, float jarg2) {
  CustomBallAndSocketWithFriction *arg1 = (CustomBallAndSocketWithFriction *) 0 ;
  float arg2 ;
  
  arg1 = (CustomBallAndSocketWithFriction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dryFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomBallAndSocketWithFriction_m_dryFriction_get(void * jarg1) {
  float jresult ;
  CustomBallAndSocketWithFriction *arg1 = (CustomBallAndSocketWithFriction *) 0 ;
  float result;
  
  arg1 = (CustomBallAndSocketWithFriction *)jarg1; 
  result = (float) ((arg1)->m_dryFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomBallAndSocketWithFriction(void * jarg1) {
  CustomBallAndSocketWithFriction *arg1 = (CustomBallAndSocketWithFriction *) 0 ;
  
  arg1 = (CustomBallAndSocketWithFriction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomControlledBallAndSocket__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  CustomControlledBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  result = (CustomControlledBallAndSocket *)new CustomControlledBallAndSocket((dMatrix const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomControlledBallAndSocket__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  dMatrix *arg1 = 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  CustomControlledBallAndSocket *result = 0 ;
  
  arg1 = (dMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "dMatrix const & type is null", 0);
    return 0;
  } 
  arg2 = (NewtonBody *)jarg2; 
  result = (CustomControlledBallAndSocket *)new CustomControlledBallAndSocket((dMatrix const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomControlledBallAndSocket(void * jarg1) {
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetAngularVelocity(void * jarg1, float jarg2) {
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float arg2 ;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAngularVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomControlledBallAndSocket_GetAngularVelocity(void * jarg1) {
  float jresult ;
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float result;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  result = (float)((CustomControlledBallAndSocket const *)arg1)->GetAngularVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetPitchAngle__SWIG_0(void * jarg1, float jarg2) {
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float arg2 ;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetPitchAngle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetPitchAngle__SWIG_1(void * jarg1) {
  float jresult ;
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float result;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  result = (float)((CustomControlledBallAndSocket const *)arg1)->SetPitchAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetYawAngle__SWIG_0(void * jarg1, float jarg2) {
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float arg2 ;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetYawAngle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetYawAngle__SWIG_1(void * jarg1) {
  float jresult ;
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float result;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  result = (float)((CustomControlledBallAndSocket const *)arg1)->SetYawAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetRollAngle__SWIG_0(void * jarg1, float jarg2) {
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float arg2 ;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRollAngle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SetRollAngle__SWIG_1(void * jarg1) {
  float jresult ;
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  float result;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  result = (float)((CustomControlledBallAndSocket const *)arg1)->SetRollAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomControlledBallAndSocket_GetSerializeKey(void * jarg1) {
  void * jresult ;
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  dCRCTYPE result;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  result = ((CustomControlledBallAndSocket const *)arg1)->GetSerializeKey();
  jresult = new dCRCTYPE((const dCRCTYPE &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CustomControlledBallAndSocket_GetTypeName(void * jarg1) {
  char * jresult ;
  CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket *) 0 ;
  char *result = 0 ;
  
  arg1 = (CustomControlledBallAndSocket *)jarg1; 
  result = (char *)((CustomControlledBallAndSocket const *)arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CustomControlledBallAndSocket_SerializeMetaData_CustomControlledBallAndSocket(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) (char *)0 ;
  CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *)new CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SerializeMetaData_CustomControlledBallAndSocket_SerializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *) 0 ;
  CustomJoint *arg2 = (CustomJoint *) (CustomJoint *)0 ;
  NewtonSerializeCallback arg3 = (NewtonSerializeCallback) 0 ;
  void *arg4 = (void *) (void *)0 ;
  
  arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *)jarg1; 
  arg2 = (CustomJoint *)jarg2; 
  arg3 = (NewtonSerializeCallback)jarg3; 
  arg4 = jarg4; 
  (arg1)->SerializeJoint(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SerializeMetaData_CustomControlledBallAndSocket_DeserializeJoint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *) 0 ;
  NewtonBody *arg2 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonBody *arg3 = (NewtonBody *) (NewtonBody *)0 ;
  NewtonDeserializeCallback arg4 = (NewtonDeserializeCallback) 0 ;
  void *arg5 = (void *) (void *)0 ;
  CustomJoint *result = 0 ;
  
  arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *)jarg1; 
  arg2 = (NewtonBody *)jarg2; 
  arg3 = (NewtonBody *)jarg3; 
  arg4 = (NewtonDeserializeCallback)jarg4; 
  arg5 = jarg5; 
  result = (CustomJoint *)(arg1)->DeserializeJoint(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CustomControlledBallAndSocket_SerializeMetaData_CustomControlledBallAndSocket(void * jarg1) {
  CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *) 0 ;
  
  arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomControlledBallAndSocket_m_metaData_CustomControlledBallAndSocket_set(void * jarg1) {
  CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *) 0 ;
  
  arg1 = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *)jarg1; 
  CustomControlledBallAndSocket::m_metaData_CustomControlledBallAndSocket = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CustomControlledBallAndSocket_m_metaData_CustomControlledBallAndSocket_get() {
  void * jresult ;
  CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *result = 0 ;
  
  result = (CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *)&CustomControlledBallAndSocket::m_metaData_CustomControlledBallAndSocket;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT dComplentaritySolver::dBilateralJoint * SWIGSTDCALL CSharp_dComplentaritySolver_dFrictionLessContactJoint_SWIGUpcast(dComplentaritySolver::dFrictionLessContactJoint *jarg1) {
    return (dComplentaritySolver::dBilateralJoint *)jarg1;
}

SWIGEXPORT dContainersAlloc * SWIGSTDCALL CSharp_dBezierSpline_SWIGUpcast(dBezierSpline *jarg1) {
    return (dContainersAlloc *)jarg1;
}

SWIGEXPORT CustomAlloc * SWIGSTDCALL CSharp_CustomJoint_SWIGUpcast(CustomJoint *jarg1) {
    return (CustomAlloc *)jarg1;
}

SWIGEXPORT CustomJoint::SerializeMetaData * SWIGSTDCALL CSharp_CustomPointToPoint_SerializeMetaData_CustomPointToPoint_SWIGUpcast(CustomPointToPoint::SerializeMetaData_CustomPointToPoint *jarg1) {
    return (CustomJoint::SerializeMetaData *)jarg1;
}

SWIGEXPORT CustomJoint * SWIGSTDCALL CSharp_CustomPointToPoint_SWIGUpcast(CustomPointToPoint *jarg1) {
    return (CustomJoint *)jarg1;
}

SWIGEXPORT CustomJoint::SerializeMetaData * SWIGSTDCALL CSharp_CustomBallAndSocket_SerializeMetaData_CustomBallAndSocket_SWIGUpcast(CustomBallAndSocket::SerializeMetaData_CustomBallAndSocket *jarg1) {
    return (CustomJoint::SerializeMetaData *)jarg1;
}

SWIGEXPORT CustomJoint * SWIGSTDCALL CSharp_CustomBallAndSocket_SWIGUpcast(CustomBallAndSocket *jarg1) {
    return (CustomJoint *)jarg1;
}

SWIGEXPORT CustomJoint::SerializeMetaData * SWIGSTDCALL CSharp_CustomLimitBallAndSocket_SerializeMetaData_CustomLimitBallAndSocket_SWIGUpcast(CustomLimitBallAndSocket::SerializeMetaData_CustomLimitBallAndSocket *jarg1) {
    return (CustomJoint::SerializeMetaData *)jarg1;
}

SWIGEXPORT CustomBallAndSocket * SWIGSTDCALL CSharp_CustomLimitBallAndSocket_SWIGUpcast(CustomLimitBallAndSocket *jarg1) {
    return (CustomBallAndSocket *)jarg1;
}

SWIGEXPORT CustomBallAndSocket * SWIGSTDCALL CSharp_CustomBallAndSocketWithFriction_SWIGUpcast(CustomBallAndSocketWithFriction *jarg1) {
    return (CustomBallAndSocket *)jarg1;
}

SWIGEXPORT CustomJoint::SerializeMetaData * SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SerializeMetaData_CustomControlledBallAndSocket_SWIGUpcast(CustomControlledBallAndSocket::SerializeMetaData_CustomControlledBallAndSocket *jarg1) {
    return (CustomJoint::SerializeMetaData *)jarg1;
}

SWIGEXPORT CustomBallAndSocket * SWIGSTDCALL CSharp_CustomControlledBallAndSocket_SWIGUpcast(CustomControlledBallAndSocket *jarg1) {
    return (CustomBallAndSocket *)jarg1;
}

#ifdef __cplusplus
}
#endif

